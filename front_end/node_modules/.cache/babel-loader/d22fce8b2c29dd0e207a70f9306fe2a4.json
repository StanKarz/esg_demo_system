{"ast":null,"code":"var _jsxFileName = \"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SentimentVis.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Brush, Label } from 'recharts';\nimport Modal from 'react-modal';\nimport '../styles/sentiment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SentimentVis() {\n  _s();\n  const {\n    filename\n  } = useParams(); // Get filename from URL parameters\n  const [sentimentData, setSentimentData] = useState(null);\n  const [selectedSentiments, setSelectedSentiments] = useState(['compound']); // Initialize with compound sentiment only\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalText, setModalText] = useState(\"\");\n  const [hoveredIndex, setHoveredIndex] = useState(null);\n  const sentimentColors = {\n    'compound': '#FF8133',\n    'pos': '#2E933C',\n    'neu': '#51B9F6',\n    'neg': '#FF5F5C'\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(`http://localhost:3000/sentiment-data/${filename}`);\n      const data = await response.json();\n      const transformedData = data.neg.map((value, index) => {\n        return {\n          index: index,\n          neg: data.neg[index],\n          neu: data.neu[index],\n          pos: data.pos[index],\n          compound: data.compound[index],\n          text: data.text[index] // Include the text field here\n        };\n      });\n\n      setSentimentData(transformedData);\n    };\n    fetchData();\n  }, [filename]);\n  const CustomTooltip = _ref => {\n    let {\n      active,\n      payload,\n      label\n    } = _ref;\n    if (active && payload && payload.length) {\n      const textChunk = sentimentData[label].text || ''; // assuming the text chunk is stored under 'text' key\n      const snippet = textChunk.length > 100 ? textChunk.substring(0, 100) + '...' : textChunk;\n      setHoveredIndex(label);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-tooltip\",\n        style: {\n          backgroundColor: '#f4f4f4',\n          padding: '5px',\n          border: '1px solid #d4d4d4'\n        },\n        children: payload.map((pl, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: `${pl.dataKey} score: ${pl.value}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this);\n    }\n    return null;\n  };\n  const handleReadMoreClick = index => {\n    const textChunk = sentimentData[index].text || '';\n    setModalText(textChunk);\n    setIsModalOpen(true);\n  };\n  const handleCheckboxChange = event => {\n    if (selectedSentiments.includes(event.target.value)) {\n      setSelectedSentiments(selectedSentiments.filter(sentiment => sentiment !== event.target.value));\n    } else {\n      setSelectedSentiments([...selectedSentiments, event.target.value]);\n    }\n  };\n  function highlightWords(text, significantWords) {\n    const words = text.split(' ');\n    return words.map((word, index) => {\n      const significantWordInfo = significantWords.find(_ref2 => {\n        let [sigWord] = _ref2;\n        return sigWord.toLowerCase() === word.toLowerCase();\n      });\n      if (significantWordInfo) {\n        const [_, score, sentiment] = significantWordInfo;\n        const color = sentiment === 'neg' ? '#FF5F5C' : sentiment === 'pos' ? '#2E933C' : '#000000'; // Default color for words not in significant_words\n\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color\n          },\n          children: [word, ' ']\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this);\n      }\n      return `${word} `;\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: sentimentData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Sentiment scores over the course of a report for \", filename]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'flex-start'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: Object.keys(sentimentColors).map(sentiment => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                id: sentiment,\n                value: sentiment,\n                checked: selectedSentiments.includes(sentiment),\n                onChange: handleCheckboxChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: sentiment,\n                children: sentiment.charAt(0).toUpperCase() + sentiment.slice(1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 41\n              }, this)]\n            }, sentiment, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Modal, {\n            isOpen: isModalOpen,\n            onRequestClose: () => setIsModalOpen(false),\n            contentLabel: \"Text Modal\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setIsModalOpen(false),\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: modalText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n            className: \"myChart\",\n            width: 1000,\n            height: 500,\n            data: sentimentData,\n            animationDuration: 300,\n            animationEasing: \"ease-out\",\n            margin: {\n              top: 5,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"index\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 51\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {\n              verticalAlign: \"top\",\n              wrapperStyle: {\n                lineHeight: '40px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 33\n            }, this), selectedSentiments.map(sentiment => /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: sentiment,\n              stroke: sentimentColors[sentiment],\n              strokeWidth: 3\n            }, sentiment, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 37\n            }, this)), /*#__PURE__*/_jsxDEV(Brush, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: 1,\n            marginLeft: '20px',\n            padding: '15px',\n            border: '1px solid #ccc',\n            borderRadius: '8px',\n            boxShadow: '2px 2px 8px rgba(0,0,0,0.1)'\n          },\n          children: hoveredIndex !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Full Text for Index \", hoveredIndex]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: highlightWords(sentimentData[hoveredIndex].text, sentimentData[hoveredIndex].significant_words)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading sentiment data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n_s(SentimentVis, \"XLTjrp89twoAa17+gfZ0OEn8JgQ=\", false, function () {\n  return [useParams];\n});\n_c = SentimentVis;\nexport default SentimentVis;\nvar _c;\n$RefreshReg$(_c, \"SentimentVis\");","map":{"version":3,"names":["React","useEffect","useState","useParams","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","Legend","Brush","Label","Modal","jsxDEV","_jsxDEV","SentimentVis","_s","filename","sentimentData","setSentimentData","selectedSentiments","setSelectedSentiments","isModalOpen","setIsModalOpen","modalText","setModalText","hoveredIndex","setHoveredIndex","sentimentColors","fetchData","response","fetch","data","json","transformedData","neg","map","value","index","neu","pos","compound","text","CustomTooltip","_ref","active","payload","label","length","textChunk","snippet","substring","className","style","backgroundColor","padding","border","children","pl","dataKey","fileName","_jsxFileName","lineNumber","columnNumber","handleReadMoreClick","handleCheckboxChange","event","includes","target","filter","sentiment","highlightWords","significantWords","words","split","word","significantWordInfo","find","_ref2","sigWord","toLowerCase","_","score","color","display","alignItems","flex","Object","keys","type","id","checked","onChange","htmlFor","charAt","toUpperCase","slice","isOpen","onRequestClose","contentLabel","onClick","width","height","animationDuration","animationEasing","margin","top","right","left","bottom","strokeDasharray","content","verticalAlign","wrapperStyle","lineHeight","stroke","strokeWidth","marginLeft","borderRadius","boxShadow","significant_words","_c","$RefreshReg$"],"sources":["/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SentimentVis.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Brush, Label } from 'recharts';\nimport Modal from 'react-modal';\nimport '../styles/sentiment.css';\n\nfunction SentimentVis() {\n    const { filename } = useParams(); // Get filename from URL parameters\n    const [sentimentData, setSentimentData] = useState(null);\n    const [selectedSentiments, setSelectedSentiments] = useState(['compound']); // Initialize with compound sentiment only\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [modalText, setModalText] = useState(\"\");\n    const [hoveredIndex, setHoveredIndex] = useState(null);\n\n    const sentimentColors = {\n        'compound': '#FF8133',\n        'pos': '#2E933C',\n        'neu': '#51B9F6',\n        'neg': '#FF5F5C'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await fetch(`http://localhost:3000/sentiment-data/${filename}`);\n            const data = await response.json();\n\n            const transformedData = data.neg.map((value, index) => {\n                return {\n                    index: index,\n                    neg: data.neg[index],\n                    neu: data.neu[index],\n                    pos: data.pos[index],\n                    compound: data.compound[index],\n                    text: data.text[index] // Include the text field here\n                }\n            });\n\n            setSentimentData(transformedData);\n        }\n        fetchData();\n    }, [filename]); \n\n    const CustomTooltip = ({ active, payload, label }) => {\n        if (active && payload && payload.length) {\n            const textChunk = sentimentData[label].text || ''; // assuming the text chunk is stored under 'text' key\n            const snippet = textChunk.length > 100 ? textChunk.substring(0, 100) + '...' : textChunk;\n\n            setHoveredIndex(label);\n            \n            return (\n                <div className=\"custom-tooltip\" style={{ backgroundColor: '#f4f4f4', padding: '5px', border: '1px solid #d4d4d4' }}>\n                    {payload.map((pl, index) => \n                        <p key={index}>{`${pl.dataKey} score: ${pl.value}`}</p>\n                    )}\n                    {/* Display the snippet */}\n                    {/* <p>Corresponding text: {snippet}</p> */}\n                </div>\n            );\n        }\n        return null;\n    };\n\n    const handleReadMoreClick = (index) => {\n        const textChunk = sentimentData[index].text || '';\n        setModalText(textChunk);\n        setIsModalOpen(true);\n    };\n\n    const handleCheckboxChange = (event) => {\n        if (selectedSentiments.includes(event.target.value)) {\n            setSelectedSentiments(selectedSentiments.filter(sentiment => sentiment !== event.target.value));\n        } else {\n            setSelectedSentiments([...selectedSentiments, event.target.value]);\n        }\n    }\n\n    function highlightWords(text, significantWords) {\n        const words = text.split(' ');\n\n        return words.map((word, index) => {\n            const significantWordInfo = significantWords.find(\n                ([sigWord]) => sigWord.toLowerCase() === word.toLowerCase()\n            );\n\n            if (significantWordInfo) {\n                const [_, score, sentiment] = significantWordInfo;\n                const color =\n                    sentiment === 'neg' ? '#FF5F5C' :\n                    sentiment === 'pos' ? '#2E933C' :\n                    '#000000'; // Default color for words not in significant_words\n\n                return (\n                    <span key={index} style={{ color }}>\n                        {word}{' '}\n                    </span>\n                );\n            }\n\n            return `${word} `;\n        });\n    }\n\n    return (\n        <div>\n            {sentimentData ? (\n                <div>\n                    <h1>Sentiment scores over the course of a report for {filename}</h1>\n                    <div style={{ display: 'flex', alignItems: 'flex-start' }}>\n                        <div style={{ flex: 1 }}>\n                            <div>\n                                {Object.keys(sentimentColors).map(sentiment => (\n                                    <div key={sentiment}>\n                                        <input \n                                            type=\"checkbox\"\n                                            id={sentiment}\n                                            value={sentiment}\n                                            checked={selectedSentiments.includes(sentiment)}\n                                            onChange={handleCheckboxChange}\n                                        />\n                                        <label htmlFor={sentiment}>{sentiment.charAt(0).toUpperCase() + sentiment.slice(1)}</label>\n                                    </div>\n                                ))}\n                            </div>\n                            <Modal\n                                    isOpen={isModalOpen}\n                                    onRequestClose={() => setIsModalOpen(false)}\n                                    contentLabel=\"Text Modal\"\n                                >\n                                    <button onClick={() => setIsModalOpen(false)}>Close</button>\n                                    <p>{modalText}</p>\n                            </Modal>\n                            <LineChart\n                                className='myChart'\n                                width={1000}\n                                height={500}\n                                data={sentimentData}\n                                animationDuration={300} \n                                animationEasing=\"ease-out\"\n                                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                            >\n                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                <XAxis dataKey=\"index\"/>\n                                <YAxis />\n                                <Tooltip content={<CustomTooltip />} />\n                                <Legend verticalAlign=\"top\" wrapperStyle={{ lineHeight: '40px' }} />\n                                {selectedSentiments.map(sentiment => \n                                    <Line key={sentiment} type=\"monotone\" dataKey={sentiment} stroke={sentimentColors[sentiment]} strokeWidth={3} />\n                                )}\n                                <Brush />\n                            </LineChart>\n                        </div>\n                        {/* Styling for the card that will contain the full text */}\n                        <div style={{ flex: 1, marginLeft: '20px', padding: '15px', border: '1px solid #ccc', borderRadius: '8px', boxShadow: '2px 2px 8px rgba(0,0,0,0.1)' }}>\n                            {hoveredIndex !== null && (\n                                <div>\n                                    <h2>Full Text for Index {hoveredIndex}</h2>\n                                    <p>{highlightWords(sentimentData[hoveredIndex].text, sentimentData[hoveredIndex].significant_words)}</p>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            ) : (\n                <p>Loading sentiment data...</p>\n            )}\n        </div>\n    );\n}\n\nexport default SentimentVis;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,SAAS,EAAEC,IAAI,EAAEC,aAAa,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,QAAQ,UAAU;AACtG,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAO,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAS,CAAC,GAAGf,SAAS,CAAC,CAAC,CAAC,CAAC;EAClC,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACmB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGpB,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EAC5E,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACuB,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAM2B,eAAe,GAAG;IACpB,UAAU,EAAE,SAAS;IACrB,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE;EACX,CAAC;EAED5B,SAAS,CAAC,MAAM;IACZ,MAAM6B,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,wCAAuCd,QAAS,EAAC,CAAC;MAChF,MAAMe,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,MAAMC,eAAe,GAAGF,IAAI,CAACG,GAAG,CAACC,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;QACnD,OAAO;UACHA,KAAK,EAAEA,KAAK;UACZH,GAAG,EAAEH,IAAI,CAACG,GAAG,CAACG,KAAK,CAAC;UACpBC,GAAG,EAAEP,IAAI,CAACO,GAAG,CAACD,KAAK,CAAC;UACpBE,GAAG,EAAER,IAAI,CAACQ,GAAG,CAACF,KAAK,CAAC;UACpBG,QAAQ,EAAET,IAAI,CAACS,QAAQ,CAACH,KAAK,CAAC;UAC9BI,IAAI,EAAEV,IAAI,CAACU,IAAI,CAACJ,KAAK,CAAC,CAAC;QAC3B,CAAC;MACL,CAAC,CAAC;;MAEFnB,gBAAgB,CAACe,eAAe,CAAC;IACrC,CAAC;IACDL,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC;EAEd,MAAM0B,aAAa,GAAGC,IAAA,IAAgC;IAAA,IAA/B;MAAEC,MAAM;MAAEC,OAAO;MAAEC;IAAM,CAAC,GAAAH,IAAA;IAC7C,IAAIC,MAAM,IAAIC,OAAO,IAAIA,OAAO,CAACE,MAAM,EAAE;MACrC,MAAMC,SAAS,GAAG/B,aAAa,CAAC6B,KAAK,CAAC,CAACL,IAAI,IAAI,EAAE,CAAC,CAAC;MACnD,MAAMQ,OAAO,GAAGD,SAAS,CAACD,MAAM,GAAG,GAAG,GAAGC,SAAS,CAACE,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,GAAGF,SAAS;MAExFtB,eAAe,CAACoB,KAAK,CAAC;MAEtB,oBACIjC,OAAA;QAAKsC,SAAS,EAAC,gBAAgB;QAACC,KAAK,EAAE;UAAEC,eAAe,EAAE,SAAS;UAAEC,OAAO,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAoB,CAAE;QAAAC,QAAA,EAC9GX,OAAO,CAACV,GAAG,CAAC,CAACsB,EAAE,EAAEpB,KAAK,kBACnBxB,OAAA;UAAA2C,QAAA,EAAiB,GAAEC,EAAE,CAACC,OAAQ,WAAUD,EAAE,CAACrB,KAAM;QAAC,GAA1CC,KAAK;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAyC,CAC1D;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGA,CAAC;IAEd;IACA,OAAO,IAAI;EACf,CAAC;EAED,MAAMC,mBAAmB,GAAI1B,KAAK,IAAK;IACnC,MAAMW,SAAS,GAAG/B,aAAa,CAACoB,KAAK,CAAC,CAACI,IAAI,IAAI,EAAE;IACjDjB,YAAY,CAACwB,SAAS,CAAC;IACvB1B,cAAc,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,MAAM0C,oBAAoB,GAAIC,KAAK,IAAK;IACpC,IAAI9C,kBAAkB,CAAC+C,QAAQ,CAACD,KAAK,CAACE,MAAM,CAAC/B,KAAK,CAAC,EAAE;MACjDhB,qBAAqB,CAACD,kBAAkB,CAACiD,MAAM,CAACC,SAAS,IAAIA,SAAS,KAAKJ,KAAK,CAACE,MAAM,CAAC/B,KAAK,CAAC,CAAC;IACnG,CAAC,MAAM;MACHhB,qBAAqB,CAAC,CAAC,GAAGD,kBAAkB,EAAE8C,KAAK,CAACE,MAAM,CAAC/B,KAAK,CAAC,CAAC;IACtE;EACJ,CAAC;EAED,SAASkC,cAAcA,CAAC7B,IAAI,EAAE8B,gBAAgB,EAAE;IAC5C,MAAMC,KAAK,GAAG/B,IAAI,CAACgC,KAAK,CAAC,GAAG,CAAC;IAE7B,OAAOD,KAAK,CAACrC,GAAG,CAAC,CAACuC,IAAI,EAAErC,KAAK,KAAK;MAC9B,MAAMsC,mBAAmB,GAAGJ,gBAAgB,CAACK,IAAI,CAC7CC,KAAA;QAAA,IAAC,CAACC,OAAO,CAAC,GAAAD,KAAA;QAAA,OAAKC,OAAO,CAACC,WAAW,CAAC,CAAC,KAAKL,IAAI,CAACK,WAAW,CAAC,CAAC;MAAA,CAC/D,CAAC;MAED,IAAIJ,mBAAmB,EAAE;QACrB,MAAM,CAACK,CAAC,EAAEC,KAAK,EAAEZ,SAAS,CAAC,GAAGM,mBAAmB;QACjD,MAAMO,KAAK,GACPb,SAAS,KAAK,KAAK,GAAG,SAAS,GAC/BA,SAAS,KAAK,KAAK,GAAG,SAAS,GAC/B,SAAS,CAAC,CAAC;;QAEf,oBACIxD,OAAA;UAAkBuC,KAAK,EAAE;YAAE8B;UAAM,CAAE;UAAA1B,QAAA,GAC9BkB,IAAI,EAAE,GAAG;QAAA,GADHrC,KAAK;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CAAC;MAEf;MAEA,OAAQ,GAAEY,IAAK,GAAE;IACrB,CAAC,CAAC;EACN;EAEA,oBACI7D,OAAA;IAAA2C,QAAA,EACKvC,aAAa,gBACVJ,OAAA;MAAA2C,QAAA,gBACI3C,OAAA;QAAA2C,QAAA,GAAI,mDAAiD,EAACxC,QAAQ;MAAA;QAAA2C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACpEjD,OAAA;QAAKuC,KAAK,EAAE;UAAE+B,OAAO,EAAE,MAAM;UAAEC,UAAU,EAAE;QAAa,CAAE;QAAA5B,QAAA,gBACtD3C,OAAA;UAAKuC,KAAK,EAAE;YAAEiC,IAAI,EAAE;UAAE,CAAE;UAAA7B,QAAA,gBACpB3C,OAAA;YAAA2C,QAAA,EACK8B,MAAM,CAACC,IAAI,CAAC5D,eAAe,CAAC,CAACQ,GAAG,CAACkC,SAAS,iBACvCxD,OAAA;cAAA2C,QAAA,gBACI3C,OAAA;gBACI2E,IAAI,EAAC,UAAU;gBACfC,EAAE,EAAEpB,SAAU;gBACdjC,KAAK,EAAEiC,SAAU;gBACjBqB,OAAO,EAAEvE,kBAAkB,CAAC+C,QAAQ,CAACG,SAAS,CAAE;gBAChDsB,QAAQ,EAAE3B;cAAqB;gBAAAL,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClC,CAAC,eACFjD,OAAA;gBAAO+E,OAAO,EAAEvB,SAAU;gBAAAb,QAAA,EAAEa,SAAS,CAACwB,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGzB,SAAS,CAAC0B,KAAK,CAAC,CAAC;cAAC;gBAAApC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA,GARrFO,SAAS;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OASd,CACR;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC,eACNjD,OAAA,CAACF,KAAK;YACEqF,MAAM,EAAE3E,WAAY;YACpB4E,cAAc,EAAEA,CAAA,KAAM3E,cAAc,CAAC,KAAK,CAAE;YAC5C4E,YAAY,EAAC,YAAY;YAAA1C,QAAA,gBAEzB3C,OAAA;cAAQsF,OAAO,EAAEA,CAAA,KAAM7E,cAAc,CAAC,KAAK,CAAE;cAAAkC,QAAA,EAAC;YAAK;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC5DjD,OAAA;cAAA2C,QAAA,EAAIjC;YAAS;cAAAoC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnB,CAAC,eACRjD,OAAA,CAACX,SAAS;YACNiD,SAAS,EAAC,SAAS;YACnBiD,KAAK,EAAE,IAAK;YACZC,MAAM,EAAE,GAAI;YACZtE,IAAI,EAAEd,aAAc;YACpBqF,iBAAiB,EAAE,GAAI;YACvBC,eAAe,EAAC,UAAU;YAC1BC,MAAM,EAAE;cAAEC,GAAG,EAAE,CAAC;cAAEC,KAAK,EAAE,EAAE;cAAEC,IAAI,EAAE,EAAE;cAAEC,MAAM,EAAE;YAAE,CAAE;YAAApD,QAAA,gBAEnD3C,OAAA,CAACT,aAAa;cAACyG,eAAe,EAAC;YAAK;cAAAlD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACvCjD,OAAA,CAACR,KAAK;cAACqD,OAAO,EAAC;YAAO;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAC,CAAC,eACxBjD,OAAA,CAACP,KAAK;cAAAqD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACTjD,OAAA,CAACN,OAAO;cAACuG,OAAO,eAAEjG,OAAA,CAAC6B,aAAa;gBAAAiB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAE;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACvCjD,OAAA,CAACL,MAAM;cAACuG,aAAa,EAAC,KAAK;cAACC,YAAY,EAAE;gBAAEC,UAAU,EAAE;cAAO;YAAE;cAAAtD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,EACnE3C,kBAAkB,CAACgB,GAAG,CAACkC,SAAS,iBAC7BxD,OAAA,CAACV,IAAI;cAAiBqF,IAAI,EAAC,UAAU;cAAC9B,OAAO,EAAEW,SAAU;cAAC6C,MAAM,EAAEvF,eAAe,CAAC0C,SAAS,CAAE;cAAC8C,WAAW,EAAE;YAAE,GAAlG9C,SAAS;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAA2F,CACnH,CAAC,eACDjD,OAAA,CAACJ,KAAK;cAAAkD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACX,CAAC,eAENjD,OAAA;UAAKuC,KAAK,EAAE;YAAEiC,IAAI,EAAE,CAAC;YAAE+B,UAAU,EAAE,MAAM;YAAE9D,OAAO,EAAE,MAAM;YAAEC,MAAM,EAAE,gBAAgB;YAAE8D,YAAY,EAAE,KAAK;YAAEC,SAAS,EAAE;UAA8B,CAAE;UAAA9D,QAAA,EACjJ/B,YAAY,KAAK,IAAI,iBAClBZ,OAAA;YAAA2C,QAAA,gBACI3C,OAAA;cAAA2C,QAAA,GAAI,sBAAoB,EAAC/B,YAAY;YAAA;cAAAkC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC3CjD,OAAA;cAAA2C,QAAA,EAAIc,cAAc,CAACrD,aAAa,CAACQ,YAAY,CAAC,CAACgB,IAAI,EAAExB,aAAa,CAACQ,YAAY,CAAC,CAAC8F,iBAAiB;YAAC;cAAA5D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvG;QACR;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,gBAENjD,OAAA;MAAA2C,QAAA,EAAG;IAAyB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAClC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAAC/C,EAAA,CAjKQD,YAAY;EAAA,QACIb,SAAS;AAAA;AAAAuH,EAAA,GADzB1G,YAAY;AAmKrB,eAAeA,YAAY;AAAC,IAAA0G,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}