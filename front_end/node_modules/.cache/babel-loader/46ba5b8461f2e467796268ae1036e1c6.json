{"ast":null,"code":"var _jsxFileName = \"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SentimentVis.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Brush, Label } from 'recharts';\nimport '../styles/sentiment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SentimentVis() {\n  _s();\n  const {\n    filename\n  } = useParams(); // Get filename from URL parameters\n  const [sentimentData, setSentimentData] = useState(null);\n  const [selectedSentiments, setSelectedSentiments] = useState(['compound']); // Initialize with compound sentiment only\n\n  const sentimentColors = {\n    'compound': '#FF8133',\n    'pos': '#2E933C',\n    'neu': '#51B9F6',\n    'neg': '#FF5F5C'\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(`http://localhost:3000/sentiment-data/${filename}`);\n      const data = await response.json();\n      const transformedData = data.neg.map((value, index) => {\n        return {\n          index: index,\n          neg: data.neg[index],\n          neu: data.neu[index],\n          pos: data.pos[index],\n          compound: data.compound[index]\n        };\n      });\n      setSentimentData(transformedData);\n    };\n    fetchData();\n  }, [filename]);\n  const CustomTooltip = _ref => {\n    let {\n      active,\n      payload,\n      label\n    } = _ref;\n    if (active && payload && payload.length) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-tooltip\",\n        style: {\n          backgroundColor: '#f4f4f4',\n          padding: '5px',\n          border: '1px solid #d4d4d4'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"label\",\n          children: [\"Index: \", label]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), payload.map((pl, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: `${pl.dataKey} score: ${pl.value}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this);\n    }\n    return null;\n  };\n  const handleCheckboxChange = event => {\n    if (selectedSentiments.includes(event.target.value)) {\n      setSelectedSentiments(selectedSentiments.filter(sentiment => sentiment !== event.target.value));\n    } else {\n      setSelectedSentiments([...selectedSentiments, event.target.value]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: sentimentData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Sentiment scores over the course of a report for \", filename]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: Object.keys(sentimentColors).map(sentiment => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: sentiment,\n            value: sentiment,\n            checked: selectedSentiments.includes(sentiment),\n            onChange: handleCheckboxChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: sentiment,\n            children: sentiment.charAt(0).toUpperCase() + sentiment.slice(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 33\n          }, this)]\n        }, sentiment, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n        className: \"myChart\",\n        width: 1000,\n        height: 500,\n        data: sentimentData,\n        animationDuration: 300,\n        animationEasing: \"ease-out\",\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {\n          verticalAlign: \"top\",\n          wrapperStyle: {\n            lineHeight: '40px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this), selectedSentiments.map(sentiment => /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: sentiment,\n          stroke: sentimentColors[sentiment],\n          strokeWidth: 3\n        }, sentiment, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(Brush, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading sentiment data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(SentimentVis, \"4zHPyxvbwfpPo3CJX6LYKMXyZ0Y=\", false, function () {\n  return [useParams];\n});\n_c = SentimentVis;\nexport default SentimentVis;\nvar _c;\n$RefreshReg$(_c, \"SentimentVis\");","map":{"version":3,"names":["React","useEffect","useState","useParams","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","Legend","Brush","Label","jsxDEV","_jsxDEV","SentimentVis","_s","filename","sentimentData","setSentimentData","selectedSentiments","setSelectedSentiments","sentimentColors","fetchData","response","fetch","data","json","transformedData","neg","map","value","index","neu","pos","compound","CustomTooltip","_ref","active","payload","label","length","className","style","backgroundColor","padding","border","children","fileName","_jsxFileName","lineNumber","columnNumber","pl","dataKey","handleCheckboxChange","event","includes","target","filter","sentiment","Object","keys","type","id","checked","onChange","htmlFor","charAt","toUpperCase","slice","width","height","animationDuration","animationEasing","margin","top","right","left","bottom","strokeDasharray","content","verticalAlign","wrapperStyle","lineHeight","stroke","strokeWidth","_c","$RefreshReg$"],"sources":["/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SentimentVis.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Brush, Label } from 'recharts';\nimport '../styles/sentiment.css';\n\nfunction SentimentVis() {\n    const { filename } = useParams(); // Get filename from URL parameters\n    const [sentimentData, setSentimentData] = useState(null);\n    const [selectedSentiments, setSelectedSentiments] = useState(['compound']); // Initialize with compound sentiment only\n\n    const sentimentColors = {\n        'compound': '#FF8133',\n        'pos': '#2E933C',\n        'neu': '#51B9F6',\n        'neg': '#FF5F5C'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await fetch(`http://localhost:3000/sentiment-data/${filename}`);\n            const data = await response.json();\n\n            const transformedData = data.neg.map((value, index) => {\n                return {\n                    index: index,\n                    neg: data.neg[index],\n                    neu: data.neu[index],\n                    pos: data.pos[index],\n                    compound: data.compound[index]\n                }\n            });\n\n            setSentimentData(transformedData);\n        }\n        fetchData();\n    }, [filename]); \n\n    const CustomTooltip = ({ active, payload, label }) => {\n        if (active && payload && payload.length) {\n            return (\n                <div className=\"custom-tooltip\" style={{ backgroundColor: '#f4f4f4', padding: '5px', border: '1px solid #d4d4d4' }}>\n                    <p className=\"label\">Index: {label}</p>\n                    {payload.map((pl, index) => \n                        <p key={index}>{`${pl.dataKey} score: ${pl.value}`}</p>\n                    )}\n                </div>\n            );\n        }\n        return null;\n    };\n\n    const handleCheckboxChange = (event) => {\n        if (selectedSentiments.includes(event.target.value)) {\n            setSelectedSentiments(selectedSentiments.filter(sentiment => sentiment !== event.target.value));\n        } else {\n            setSelectedSentiments([...selectedSentiments, event.target.value]);\n        }\n    }\n    \n    return (\n        <div>\n            {sentimentData ? (\n                <div>\n                    <h1>Sentiment scores over the course of a report for {filename}</h1>\n                    <div>\n                        {Object.keys(sentimentColors).map(sentiment => (\n                            <div key={sentiment}>\n                                <input \n                                    type=\"checkbox\"\n                                    id={sentiment}\n                                    value={sentiment}\n                                    checked={selectedSentiments.includes(sentiment)}\n                                    onChange={handleCheckboxChange}\n                                />\n                                <label htmlFor={sentiment}>{sentiment.charAt(0).toUpperCase() + sentiment.slice(1)}</label>\n                            </div>\n                        ))}\n                    </div>\n                    <LineChart\n                        className='myChart'\n                        width={1000}\n                        height={500}\n                        data={sentimentData}\n                        animationDuration={300} \n                        animationEasing=\"ease-out\"\n                        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"index\"/>\n                        <YAxis />\n                        <Tooltip content={<CustomTooltip />} />\n                        <Legend verticalAlign=\"top\" wrapperStyle={{ lineHeight: '40px' }} />\n                        {selectedSentiments.map(sentiment => \n                            <Line key={sentiment} type=\"monotone\" dataKey={sentiment} stroke={sentimentColors[sentiment]} strokeWidth={3} />\n                        )}\n                        <Brush />\n                    </LineChart>\n                </div>\n            ) : (\n                <p>Loading sentiment data...</p>\n            )}\n        </div>\n    );\n}\n\nexport default SentimentVis;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}