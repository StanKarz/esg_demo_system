{"ast":null,"code":"import _slicedToArray from \"/Users/stan/Desktop/esg_demo_system/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TreeVisualisation.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { useParams } from 'react-router-dom';\nimport { max } from 'd3-array'; // import max function from d3-array\nimport '../styles/TreeDiagram.css';\nfunction TreeVisualisation() {\n  var _useParams = useParams(),\n    filenameFromParams = _useParams.filename;\n  var ref = useRef(null);\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1];\n  useEffect(function () {\n    console.log(\"Filename from params: \", filenameFromParams);\n    drawTree(filenameFromParams);\n  }, [filenameFromParams]);\n  var countDescendants = function countDescendants(node) {\n    var n = 0;\n    if (node.children) {\n      node.children.forEach(function (child) {\n        return n += countDescendants(child);\n      });\n    }\n    return node.descendants = n + 1;\n  };\n  var drawTree = function drawTree(filename) {\n    var i = 0;\n    var duration = 800;\n    var root;\n    var svgContainer = d3.select(ref.current);\n    svgContainer.selectAll(\"*\").remove();\n    var zoom = d3.zoom().scaleExtent([0.5, 10]).on(\"zoom\", function (event) {\n      svg.attr(\"transform\", event.transform);\n    });\n    var svg = svgContainer.append(\"svg\").attr(\"width\", \"100%\").attr(\"height\", \"100%\").attr(\"viewBox\", \"-100 -20 2000 1000\").attr(\"preserveAspectRatio\", \"xMidYMid meet\").call(zoom).append(\"g\");\n    var treemap = d3.tree().size([900, 800]).separation(function (a, b) {\n      return (a.parent == b.parent ? 1 : 5) / a.depth;\n    });\n    function centerTree() {\n      var nodesExtent = d3.extent(svg.selectAll('.node').nodes(), function (d) {\n        var bbox = d.getBBox();\n        var matrix = d.getCTM();\n        return matrix ? [matrix.e + bbox.x, matrix.e + bbox.x + bbox.width] : [0, 0];\n      });\n      var xOffset = (nodesExtent[0] + nodesExtent[1]) / -2;\n      var scale = 0.8; // You can adjust the scale as needed\n      svgContainer.transition().duration(duration).call(zoom.transform, d3.zoomIdentity.translate(xOffset, 0).scale(scale));\n    }\n    d3.json(\"http://localhost:3000/processed_data/\".concat(filename)).then(function (treeData) {\n      console.log(\"Received tree data: \", treeData);\n      root = d3.hierarchy(treeData, function (d) {\n        return d.children;\n      });\n      root.x0 = window.innerHeight / 2;\n      root.y0 = window.innerWidth / 10;\n      root.children.forEach(collapse);\n      update(root);\n      centerTree();\n      setLoading(false);\n    }).catch(function (error) {\n      console.error(\"Error occurred while fetching and processing data: \", error);\n      setLoading(false);\n    });\n    var collapse = function collapse(d) {\n      if (d.children) {\n        d._children = d.children;\n        d._children.forEach(collapse);\n        d.children = null;\n      }\n    };\n    var update = function update(source) {\n      var treeData = treemap(root);\n      var nodes = treeData.descendants();\n      var links = treeData.descendants().slice(1);\n      nodes.forEach(function (d) {\n        d.y = d.depth * 1250;\n      });\n      var node = svg.selectAll('g.node').data(nodes, function (d) {\n        return d.id || (d.id = ++i);\n      });\n      var nodeEnter = node.enter().append('g').attr('class', 'node').attr(\"transform\", function (d) {\n        return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n      }).on('click', function (event, d) {\n        return click(d);\n      });\n      nodeEnter.append('circle').attr('class', 'node').attr('r', 1e-4).style(\"fill\", function (d) {\n        return d._children ? \"lightsteelblue\" : \"#fff\";\n      });\n      nodeEnter.append('text').attr(\"dy\", \" -1em\") // Shifts the text vertically so it's centered on the node\n      .attr(\"x\", 0) // Centers the text horizontally on the node\n      .style(\"text-anchor\", \"middle\") // Ensures the text is centered at its position\n      .text(function (d) {\n        return d.data.name;\n      });\n      var nodeUpdate = nodeEnter.merge(node);\n      nodeUpdate.transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + d.y + \",\" + d.x + \")\";\n      });\n      nodeUpdate.select('circle.node').attr('r', 15).style(\"fill\", function (d) {\n        if (d._children) {\n          return \"lightsteelblue\";\n        } else if (d.children) {\n          return \"green\";\n        } else {\n          return \"#fff\";\n        }\n      }).attr('cursor', 'pointer');\n      var nodeExit = node.exit().transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + source.y + \",\" + source.x + \")\";\n      }).remove();\n      nodeExit.select('circle').attr('r', 1e-5);\n      nodeExit.select('text').style('fill-opacity', 1e-5);\n      var link = svg.selectAll('path.link').data(links, function (d) {\n        return d.id;\n      });\n      var linkEnter = link.enter().insert('path', \"g\").attr(\"class\", \"link\").attr('d', function (d) {\n        var o = {\n          x: source.x0,\n          y: source.y0\n        };\n        return diagonal(o, o);\n      });\n      var linkUpdate = linkEnter.merge(link);\n      linkUpdate.transition().duration(duration).attr('d', function (d) {\n        return diagonal(d, d.parent);\n      });\n      var linkExit = link.exit().transition().duration(duration).attr('d', function (d) {\n        var o = {\n          x: source.x,\n          y: source.y\n        };\n        return diagonal(o, o);\n      }).remove();\n      nodes.forEach(function (d) {\n        d.x0 = d.x;\n        d.y0 = d.y;\n      });\n      function click(d) {\n        var nodeToFocus;\n\n        // If the clicked node is the root\n        if (d.depth === 0) {\n          if (d.children) {\n            // If the root node has children\n            collapseAll(d); // Collapse all children\n          } else if (d._children) {\n            // If the root node has collapsed children\n            d.children = d._children; // Expand the root node\n            d._children = null;\n          }\n          nodeToFocus = d; // Set the root node as the node to focus\n        } else {\n          if (d.children) {\n            d._children = d.children;\n            d.children = null;\n            nodeToFocus = d.parent;\n          } else {\n            d.children = d._children;\n            d._children = null;\n            nodeToFocus = d;\n          }\n        }\n        update(nodeToFocus); // Update with the node to focus\n        centerNode(nodeToFocus); // Center the node to focus\n      }\n\n      // This function will recursively collapse all children of a node\n      function collapseAll(node) {\n        if (node.children) {\n          node.children.forEach(collapseAll); // Call this function for each child\n          node._children = node.children;\n          node.children = null;\n        }\n      }\n      function centerNode(source) {\n        var scale = 0.8;\n        var x = -source.y * scale + 300; // 750 is half of 1500 (the size defined for the tree layout)\n        var y = -source.x * scale + 300;\n        svgContainer.transition().duration(duration).ease(d3.easeCubic).call(zoom.transform, d3.zoomIdentity.translate(x, y).scale(scale));\n      }\n      function diagonal(s, d) {\n        var path = \"M \".concat(s.y, \" \").concat(s.x, \"\\n                C \").concat((s.y + d.y) / 2, \" \").concat(s.x, \",\\n                  \").concat((s.y + d.y) / 2, \" \").concat(d.x, \",\\n                  \").concat(d.y, \" \").concat(d.x);\n        return path;\n      }\n    };\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"visualisation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"svg-container \".concat(loading ? 'hidden' : ''),\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  }));\n}\nexport default TreeVisualisation;","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","useParams","max","TreeVisualisation","_useParams","filenameFromParams","filename","ref","_useState","_useState2","_slicedToArray","loading","setLoading","console","log","drawTree","countDescendants","node","n","children","forEach","child","descendants","i","duration","root","svgContainer","select","current","selectAll","remove","zoom","scaleExtent","on","event","svg","attr","transform","append","call","treemap","tree","size","separation","a","b","parent","depth","centerTree","nodesExtent","extent","nodes","d","bbox","getBBox","matrix","getCTM","e","x","width","xOffset","scale","transition","zoomIdentity","translate","json","concat","then","treeData","hierarchy","x0","window","innerHeight","y0","innerWidth","collapse","update","catch","error","_children","source","links","slice","y","data","id","nodeEnter","enter","click","style","text","name","nodeUpdate","merge","nodeExit","exit","link","linkEnter","insert","o","diagonal","linkUpdate","linkExit","nodeToFocus","collapseAll","centerNode","ease","easeCubic","s","path","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TreeVisualisation.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { useParams } from 'react-router-dom';\nimport { max } from 'd3-array'; // import max function from d3-array\nimport '../styles/TreeDiagram.css';\n\nfunction TreeVisualisation() {\n    \n    const { filename: filenameFromParams } = useParams();\n    const ref = useRef(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        console.log(\"Filename from params: \", filenameFromParams);\n        drawTree(filenameFromParams);\n    }, [filenameFromParams]);\n\n\n    const countDescendants = node => {\n      let n = 0;\n      if(node.children) {\n        node.children.forEach(child => n += countDescendants(child));\n      }\n      return node.descendants = n + 1;\n    };\n\n    const drawTree = (filename) => {\n        let i = 0;\n        let duration = 800;\n        let root;\n\n    const svgContainer = d3.select(ref.current)\n\n    svgContainer.selectAll(\"*\").remove();\n\n    \n    \n    const zoom = d3.zoom()\n        .scaleExtent([0.5, 10])\n        .on(\"zoom\", function (event){\n            svg.attr(\"transform\", event.transform)\n        });\n\n    const svg = svgContainer.append(\"svg\")\n        .attr(\"width\", \"100%\")\n        .attr(\"height\", \"100%\")\n        .attr(\"viewBox\", \"-100 -20 2000 1000\")\n        .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n        .call(zoom)\n        .append(\"g\");\n\n        const treemap = d3.tree().size([900, 800])\n        .separation(function(a, b) {\n            return (a.parent == b.parent ? 1 : 5) / a.depth;\n        });\n\n        function centerTree() {\n            const nodesExtent = d3.extent(svg.selectAll('.node').nodes(), function(d) {\n                const bbox = d.getBBox();\n                const matrix = d.getCTM();\n                return matrix ? [matrix.e + bbox.x, matrix.e + bbox.x + bbox.width]: [0,0];\n            });\n        \n            const xOffset = (nodesExtent[0] + nodesExtent[1]) / -2;\n            const scale = 0.8; // You can adjust the scale as needed\n            svgContainer.transition()\n                .duration(duration)\n                .call(zoom.transform, d3.zoomIdentity.translate(xOffset, 0).scale(scale));\n        }\n\n    d3.json(`http://localhost:3000/processed_data/${filename}`)\n      .then((treeData) => { \n        console.log(\"Received tree data: \", treeData);\n        root = d3.hierarchy(treeData, function(d) { return d.children; });\n        root.x0 = window.innerHeight / 2;\n        root.y0 = window.innerWidth / 10;\n        root.children.forEach(collapse);\n        update(root);\n        centerTree();\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error(\"Error occurred while fetching and processing data: \", error);\n        setLoading(false);\n      });\n\n      const collapse = (d) => {\n        if(d.children) {\n          d._children = d.children;\n          d._children.forEach(collapse);\n          d.children = null;\n        }\n      }\n\n      const update = (source) => {\n        const treeData = treemap(root);\n        const nodes = treeData.descendants();\n        const links = treeData.descendants().slice(1);\n  \n        nodes.forEach(function(d){ d.y = d.depth * 1250});\n  \n        const node = svg.selectAll('g.node')\n            .data(nodes, function(d) {return d.id || (d.id = ++i); });\n  \n        const nodeEnter = node.enter().append('g')\n            .attr('class', 'node')\n            .attr(\"transform\", function(d) {\n              return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n          })\n          .on('click', (event, d) => click(d));\n\n        nodeEnter.append('circle')\n            .attr('class', 'node')\n            .attr('r', 1e-4)\n            .style(\"fill\", function(d) {\n                return d._children ? \"lightsteelblue\" : \"#fff\";\n            });\n\n        nodeEnter.append('text')\n        .attr(\"dy\", \" -1em\") // Shifts the text vertically so it's centered on the node\n        .attr(\"x\", 0) // Centers the text horizontally on the node\n        .style(\"text-anchor\", \"middle\") // Ensures the text is centered at its position\n        .text(function(d) { return d.data.name; });\n\n  \n        const nodeUpdate = nodeEnter.merge(node);\n  \n        nodeUpdate.transition()\n          .duration(duration)\n          .attr(\"transform\", function(d) { \n              return \"translate(\" + d.y + \",\" + d.x + \")\";\n           });\n  \n        nodeUpdate.select('circle.node')\n          .attr('r', 15)\n          .style(\"fill\", function(d) {\n              if (d._children) {\n                return \"lightsteelblue\";\n              } else if (d.children) {\n                return \"green\";\n              } else {\n                return \"#fff\";\n              }\n          })\n          .attr('cursor', 'pointer');\n  \n        const nodeExit = node.exit().transition()\n            .duration(duration)\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + source.y + \",\" + source.x + \")\";\n            })\n            .remove();\n  \n        nodeExit.select('circle')\n          .attr('r', 1e-5);\n  \n        nodeExit.select('text')\n          .style('fill-opacity', 1e-5);\n  \n        const link = svg.selectAll('path.link')\n            .data(links, function(d) { return d.id; });\n  \n        const linkEnter = link.enter().insert('path', \"g\")\n            .attr(\"class\", \"link\")\n            .attr('d', function(d){\n              var o = {x: source.x0, y: source.y0}\n              return diagonal(o, o)\n            });\n  \n        const linkUpdate = linkEnter.merge(link);\n  \n        linkUpdate.transition()\n            .duration(duration)\n            .attr('d', function(d){ return diagonal(d, d.parent) });\n  \n        const linkExit = link.exit().transition()\n            .duration(duration)\n            .attr('d', function(d) {\n              var o = {x: source.x, y: source.y}\n              return diagonal(o, o)\n            })\n            .remove();\n  \n        nodes.forEach(function(d){\n          d.x0 = d.x;\n          d.y0 = d.y;\n        });\n\n        function click(d) {\n            let nodeToFocus;\n            \n            // If the clicked node is the root\n            if (d.depth === 0) {\n              if (d.children) { // If the root node has children\n                collapseAll(d); // Collapse all children\n              } else if (d._children) { // If the root node has collapsed children\n                d.children = d._children; // Expand the root node\n                d._children = null;\n              }\n              nodeToFocus = d; // Set the root node as the node to focus\n            } else {\n              if (d.children) {\n                d._children = d.children;\n                d.children = null;\n                nodeToFocus = d.parent;\n              } else {\n                d.children = d._children;\n                d._children = null;\n                nodeToFocus = d;\n              }\n            }\n          \n            update(nodeToFocus); // Update with the node to focus\n            centerNode(nodeToFocus); // Center the node to focus\n          }\n          \n          // This function will recursively collapse all children of a node\n          function collapseAll(node) {\n            if (node.children) {\n              node.children.forEach(collapseAll); // Call this function for each child\n              node._children = node.children; \n              node.children = null; \n            }\n          }\n          \n        function centerNode(source){\n                let scale = 0.8;\n                let x = -source.y * scale + 300; // 750 is half of 1500 (the size defined for the tree layout)\n                let y = -source.x * scale + 300;\n                svgContainer.transition()\n                    .duration(duration)\n                    .ease(d3.easeCubic)\n                    .call(zoom.transform, d3.zoomIdentity.translate(x, y).scale(scale));\n        }\n        \n        function diagonal(s, d) {\n  \n          const path = `M ${s.y} ${s.x}\n                C ${(s.y + d.y) / 2} ${s.x},\n                  ${(s.y + d.y) / 2} ${d.x},\n                  ${d.y} ${d.x}`\n  \n          return path\n        }\n      }\n    }\n  \n    return (\n      <div className=\"visualisation\">\n        {loading ?\n        <div>Loading...</div> : null}\n        <div className={`svg-container ${loading ? 'hidden' : ''}`} ref={ref}></div>\n      </div>\n    );\n  }\n  \n  export default TreeVisualisation;"],"mappings":"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"},"metadata":{},"sourceType":"module"}