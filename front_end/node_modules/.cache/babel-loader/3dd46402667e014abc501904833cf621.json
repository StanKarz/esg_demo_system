{"ast":null,"code":"import _slicedToArray from \"/Users/stan/Desktop/esg_demo_system/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TreeVisualisation.js\";\n// import React, { useEffect, useRef, useState } from 'react';\n// import * as d3 from 'd3';\n// import { useParams } from'react-router-dom';\n\n// function TreeVisualisation({}) {\n//     // const { filename } = useParams();\n//     const { filename: filenameFromParams } = useParams();\n//     const [filename, setFilename] = useState(filenameFromParams);\n//     const ref = useRef();\n\n//     useEffect(() => {\n//         setFilename(filenameFromParams)\n//         console.log(filenameFromParams);\n//          // <-- Add this line\n//         drawTree(filenameFromParams);\n//     }, [filenameFromParams]);\n\n//     const drawTree = (filename) => {\n//         // clear SVG in case of any previous renders\n//         d3.select(ref.current).selectAll(\"*\").remove();\n\n//         var margin = {top: 20, right: 90, bottom: 30, left: 90},\n//             width = 2000 - margin.left - margin.right,\n//             height = 1000 - margin.top - margin.bottom;\n\n//         var svg = d3.select(ref.current)\n//             .attr(\"width\", \"100%\")\n//             .attr(\"height\", \"100%\")\n//             .attr(\"viewBox\", `0 0 ${width + margin.right + margin.left} ${height + margin.top + margin.bottom}`)\n//             .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n//             .append(\"g\")\n//             .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n//         var treemap = d3.tree().size([height, width]).separation(function(a, b) {\n//             return (a.parent == b.parent ? 70 : 50);\n//         });\n\n//         d3.json(`http://localhost:3000/processed_data/${filename}`)\n//         .then(function(error, treeData) { \n//             if (error) throw error;\n//             var root = d3.hierarchy(treeData, function(d) { return d.children; });\n//             root.x0 = height / 2;\n//             root.y0 = width / 2;\n//             // Collapse after the second level\n//             root.children.forEach(collapse);\n//             update(root);\n//         })\n//         .catch(error => {\n//             console.error(\"Error occured while fetching and processing data: \", error);\n//         });\n\n//         // Include your functions collapse, update, etc. here.\n//         function collapse(d) {\n//             if(d.children) {\n//                 d._children = d.children;\n//                 d._children.forEach(collapse);\n//                 d.children = null;\n//             }\n//         }\n\n//         function centerNode(source) {\n//             let scale = 0.8;\n//             let x = -source.y0 * scale + width / 2;\n//             let y = -source.x0 * scale + height / 2;\n//             svg.transition()\n//                 .duration(750)\n//                 .call(d3.zoomIdentity.translate(x, y).scale(scale));\n//         }\n\n//         function update(source) {\n//             // Complete update function and other related functions go here\n//         }\n\n//         function update(source) {\n//             var i = 0,\n//             duration = 750;\n\n//             // Assigns the x and y position for the nodes\n//             var treeData = treemap(root);\n\n//             // Compute the new tree layout.\n//             var nodes = treeData.descendants(),\n//                 links = treeData.descendants().slice(1);\n\n//             // Normalize for fixed-depth.\n//             nodes.forEach(function(d){ d.y = d.depth * 1200});\n//             }\n\n//             // ****************** Nodes section ***************************\n\n//             // Update the nodes...\n//             var node = svg.selectAll('g.node')\n//             .data(nodes, function(d) {return d.id || (d.id = ++i); });\n\n//             // Enter any new nodes at the parent's previous position.\n//             var nodeEnter = node.enter().append('g')\n//                 .attr('class', 'node')\n//                 .attr(\"transform\", function(d) {\n//                     return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n//                 })\n//             .on('click', click);\n\n//             // Add Circle for the nodes\n//             nodeEnter.append('circle')\n//                 .attr('class', 'node')\n//                 .attr('r', 1e-4)\n//                 .style(\"fill\", function(d) {\n//                     return d._children ? \"lightsteelblue\" : \"#fff\";\n//                 });\n\n//             // Add labels for the nodes\n//             nodeEnter.append('text')\n//                 .attr(\"dy\", \".35em\")\n//                 .attr(\"x\", function(d) {\n//                     return d.children || d._children ? -13 : 13;\n//                 })\n//                 .attr(\"text-anchor\", function(d) {\n//                     return d.children || d._children ? \"end\" : \"start\";\n//                 })\n//                 .text(function(d) { return d.data.name; });\n\n// // Rest of the code goes here, similar to your HTML file.\n// }\n\n//     return (\n//         <div>\n//             <h1>{filename}</h1>\n//             {/* <h2>TESTING</h2> */}\n//             <svg ref={ref}></svg>\n//         </div>\n//     );\n// }\n\n// export default TreeVisualisation;\n\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { Tree } from 'react-d3-tree';\nimport { useParams } from 'react-router-dom';\nvar TreeVisualisation = function TreeVisualisation() {\n  // const { filename: filenameFromParams } = useParams();\n  var filename = React.useState.filename;\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    data = _React$useState2[0],\n    setData = _React$useState2[1];\n  var ref = useRef();\n  React.useEffect(function () {\n    fetch('/visualisations/report_structure/tree/${filename}').then(function (response) {\n      return response.json();\n    });\n    var filename = filenameFromParams;\n    var margin = {\n        top: 20,\n        right: 90,\n        bottom: 30,\n        left: 90\n      },\n      width = 960 - margin.left - margin.right,\n      height = 500 - margin.top - margin.bottom;\n    var svg = d3.select(ref.current).attr(\"width\", width + margin.right + margin.left).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    var i = 0,\n      duration = 750,\n      root;\n    var treemap = d3.tree().size([height, width]);\n\n    // load the external data\n    d3.json(\"http://localhost:3000/processed_data/\".concat(filename)).then(function (treeData) {\n      root = d3.hierarchy(treeData, function (d) {\n        return d.children;\n      });\n      root.x0 = height / 2;\n      root.y0 = 0;\n\n      // Collapse after the second level\n      root.children.forEach(collapse);\n      update(root);\n    }).catch(console.error);\n\n    // Collapse the node and all it's children\n    function collapse(d) {\n      if (d.children) {\n        d._children = d.children;\n        d._children.forEach(collapse);\n        d.children = null;\n      }\n    }\n    function update(source) {\n      var treeData = treemap(root);\n      var nodes = treeData.descendants(),\n        links = treeData.descendants().slice(1);\n      nodes.forEach(function (d) {\n        d.y = d.depth * 180;\n      });\n      var node = svg.selectAll('g.node').data(nodes, function (d) {\n        return d.id || (d.id = ++i);\n      });\n      var nodeEnter = node.enter().append('g').attr('class', 'node').attr(\"transform\", function (d) {\n        return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n      }).on('click', click);\n      nodeEnter.append('circle').attr('class', 'node').attr('r', 1e-6).style(\"fill\", function (d) {\n        return d._children ? \"lightsteelblue\" : \"#fff\";\n      });\n      nodeEnter.append('text').attr(\"dy\", \".35em\").attr(\"x\", function (d) {\n        return d.children || d._children ? -13 : 13;\n      }).attr(\"text-anchor\", function (d) {\n        return d.children || d._children ? \"end\" : \"start\";\n      }).text(function (d) {\n        return d.data.name;\n      });\n      var nodeUpdate = nodeEnter.merge(node);\n      nodeUpdate.transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + d.y + \",\" + d.x + \")\";\n      });\n      nodeUpdate.select('circle.node').attr('r', 10).style(\"fill\", function (d) {\n        return d._children ? \"lightsteelblue\" : \"#fff\";\n      }).attr('cursor', 'pointer');\n      var nodeExit = node.exit().transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + source.y + \",\" + source.x + \")\";\n      }).remove();\n      nodeExit.select('circle').attr('r', 1e-6);\n      nodeExit.select('text').style('fill-opacity', 1e-6);\n      var link = svg.selectAll('path.link').data(links, function (d) {\n        return d.id;\n      });\n      var linkEnter = link.enter().insert('path', \"g\").attr(\"class\", \"link\").attr('d', function (d) {\n        var o = {\n          x: source.x0,\n          y: source.y0\n        };\n        return diagonal(o, o);\n      });\n      var linkUpdate = linkEnter.merge(link);\n      linkUpdate.transition().duration(duration).attr('d', function (d) {\n        return diagonal(d, d.parent);\n      });\n      var linkExit = link.exit().transition().duration(duration).attr('d', function (d) {\n        var o = {\n          x: source.x,\n          y: source.y\n        };\n        return diagonal(o, o);\n      }).remove();\n      nodes.forEach(function (d) {\n        d.x0 = d.x;\n        d.y0 = d.y;\n      });\n      function diagonal(s, d) {\n        var path = \"M \".concat(s.y, \" \").concat(s.x, \"\\n                            C \").concat((s.y + d.y) / 2, \" \").concat(s.x, \",\\n                              \").concat((s.y + d.y) / 2, \" \").concat(d.x, \",\\n                              \").concat(d.y, \" \").concat(d.x);\n        return path;\n      }\n      function click(d) {\n        if (d.children) {\n          d._children = d.children;\n          d.children = null;\n        } else {\n          d.children = d._children;\n          d._children = null;\n        }\n        update(d);\n      }\n    }\n  }, [filenameFromParams]);\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 12\n    }\n  });\n};\nexport default TreeVisualisation;","map":{"version":3,"names":["React","useEffect","useRef","d3","Tree","useParams","TreeVisualisation","filename","useState","_React$useState","_React$useState2","_slicedToArray","data","setData","ref","fetch","then","response","json","filenameFromParams","margin","top","right","bottom","left","width","height","svg","select","current","attr","append","i","duration","root","treemap","tree","size","concat","treeData","hierarchy","d","children","x0","y0","forEach","collapse","update","catch","console","error","_children","source","nodes","descendants","links","slice","y","depth","node","selectAll","id","nodeEnter","enter","on","click","style","text","name","nodeUpdate","merge","transition","x","nodeExit","exit","remove","link","linkEnter","insert","o","diagonal","linkUpdate","parent","linkExit","s","path","createElement","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TreeVisualisation.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\n// import * as d3 from 'd3';\n// import { useParams } from'react-router-dom';\n\n// function TreeVisualisation({}) {\n//     // const { filename } = useParams();\n//     const { filename: filenameFromParams } = useParams();\n//     const [filename, setFilename] = useState(filenameFromParams);\n//     const ref = useRef();\n\n//     useEffect(() => {\n//         setFilename(filenameFromParams)\n//         console.log(filenameFromParams);\n//          // <-- Add this line\n//         drawTree(filenameFromParams);\n//     }, [filenameFromParams]);\n\n//     const drawTree = (filename) => {\n//         // clear SVG in case of any previous renders\n//         d3.select(ref.current).selectAll(\"*\").remove();\n\n//         var margin = {top: 20, right: 90, bottom: 30, left: 90},\n//             width = 2000 - margin.left - margin.right,\n//             height = 1000 - margin.top - margin.bottom;\n\n//         var svg = d3.select(ref.current)\n//             .attr(\"width\", \"100%\")\n//             .attr(\"height\", \"100%\")\n//             .attr(\"viewBox\", `0 0 ${width + margin.right + margin.left} ${height + margin.top + margin.bottom}`)\n//             .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n//             .append(\"g\")\n//             .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n//         var treemap = d3.tree().size([height, width]).separation(function(a, b) {\n//             return (a.parent == b.parent ? 70 : 50);\n//         });\n\n//         d3.json(`http://localhost:3000/processed_data/${filename}`)\n//         .then(function(error, treeData) { \n//             if (error) throw error;\n//             var root = d3.hierarchy(treeData, function(d) { return d.children; });\n//             root.x0 = height / 2;\n//             root.y0 = width / 2;\n//             // Collapse after the second level\n//             root.children.forEach(collapse);\n//             update(root);\n//         })\n//         .catch(error => {\n//             console.error(\"Error occured while fetching and processing data: \", error);\n//         });\n\n//         // Include your functions collapse, update, etc. here.\n//         function collapse(d) {\n//             if(d.children) {\n//                 d._children = d.children;\n//                 d._children.forEach(collapse);\n//                 d.children = null;\n//             }\n//         }\n\n//         function centerNode(source) {\n//             let scale = 0.8;\n//             let x = -source.y0 * scale + width / 2;\n//             let y = -source.x0 * scale + height / 2;\n//             svg.transition()\n//                 .duration(750)\n//                 .call(d3.zoomIdentity.translate(x, y).scale(scale));\n//         }\n\n//         function update(source) {\n//             // Complete update function and other related functions go here\n//         }\n\n//         function update(source) {\n//             var i = 0,\n//             duration = 750;\n        \n//             // Assigns the x and y position for the nodes\n//             var treeData = treemap(root);\n        \n//             // Compute the new tree layout.\n//             var nodes = treeData.descendants(),\n//                 links = treeData.descendants().slice(1);\n            \n//             // Normalize for fixed-depth.\n//             nodes.forEach(function(d){ d.y = d.depth * 1200});\n//             }\n\n//             // ****************** Nodes section ***************************\n\n//             // Update the nodes...\n//             var node = svg.selectAll('g.node')\n//             .data(nodes, function(d) {return d.id || (d.id = ++i); });\n\n//             // Enter any new nodes at the parent's previous position.\n//             var nodeEnter = node.enter().append('g')\n//                 .attr('class', 'node')\n//                 .attr(\"transform\", function(d) {\n//                     return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n//                 })\n//             .on('click', click);\n\n//             // Add Circle for the nodes\n//             nodeEnter.append('circle')\n//                 .attr('class', 'node')\n//                 .attr('r', 1e-4)\n//                 .style(\"fill\", function(d) {\n//                     return d._children ? \"lightsteelblue\" : \"#fff\";\n//                 });\n\n//             // Add labels for the nodes\n//             nodeEnter.append('text')\n//                 .attr(\"dy\", \".35em\")\n//                 .attr(\"x\", function(d) {\n//                     return d.children || d._children ? -13 : 13;\n//                 })\n//                 .attr(\"text-anchor\", function(d) {\n//                     return d.children || d._children ? \"end\" : \"start\";\n//                 })\n//                 .text(function(d) { return d.data.name; });\n\n\n// // Rest of the code goes here, similar to your HTML file.\n// }\n\n//     return (\n//         <div>\n//             <h1>{filename}</h1>\n//             {/* <h2>TESTING</h2> */}\n//             <svg ref={ref}></svg>\n//         </div>\n//     );\n// }\n\n// export default TreeVisualisation;\n\n\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { Tree } from 'react-d3-tree';\nimport { useParams } from 'react-router-dom';\n\nconst TreeVisualisation = () => {\n    // const { filename: filenameFromParams } = useParams();\n    const { filename } = React.useState;\n    const [data, setData] = React.useState(null);\n    const ref = useRef();\n\n    React.useEffect(() => {\n        fetch('/visualisations/report_structure/tree/${filename}')\n            .then(response => response.json())\n            const filename = filenameFromParams;\n        var margin = {top: 20, right: 90, bottom: 30, left: 90},\n            width = 960 - margin.left - margin.right,\n            height = 500 - margin.top - margin.bottom;\n\n        var svg = d3.select(ref.current)\n            .attr(\"width\", width + margin.right + margin.left)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        var i = 0, duration = 750, root;\n\n        var treemap = d3.tree().size([height, width]);\n\n        // load the external data\n        d3.json(`http://localhost:3000/processed_data/${filename}`)\n            .then(treeData => {\n                root = d3.hierarchy(treeData, function(d) { return d.children; });\n                root.x0 = height / 2;\n                root.y0 = 0;\n\n                // Collapse after the second level\n                root.children.forEach(collapse);\n\n                update(root);\n            })\n            .catch(console.error);\n\n        // Collapse the node and all it's children\n        function collapse(d) {\n            if(d.children) {\n                d._children = d.children;\n                d._children.forEach(collapse);\n                d.children = null;\n            }\n        }\n\n        function update(source) {\n            var treeData = treemap(root);\n            var nodes = treeData.descendants(),\n                links = treeData.descendants().slice(1);\n            nodes.forEach(function(d){ d.y = d.depth * 180});\n\n            var node = svg.selectAll('g.node')\n                .data(nodes, function(d) {return d.id || (d.id = ++i); });\n\n            var nodeEnter = node.enter().append('g')\n                .attr('class', 'node')\n                .attr(\"transform\", function(d) {\n                    return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n                })\n                .on('click', click);\n\n            nodeEnter.append('circle')\n                .attr('class', 'node')\n                .attr('r', 1e-6)\n                .style(\"fill\", function(d) {\n                    return d._children ? \"lightsteelblue\" : \"#fff\";\n                });\n\n            nodeEnter.append('text')\n                .attr(\"dy\", \".35em\")\n                .attr(\"x\", function(d) {\n                    return d.children || d._children ? -13 : 13;\n                })\n                .attr(\"text-anchor\", function(d) {\n                    return d.children || d._children ? \"end\" : \"start\";\n                })\n                .text(function(d) { return d.data.name; });\n\n            var nodeUpdate = nodeEnter.merge(node);\n            nodeUpdate.transition()\n                .duration(duration)\n                .attr(\"transform\", function(d) { \n                    return \"translate(\" + d.y + \",\" + d.x + \")\";\n                });\n\n            nodeUpdate.select('circle.node')\n                .attr('r', 10)\n                .style(\"fill\", function(d) {\n                    return d._children ? \"lightsteelblue\" : \"#fff\";\n                })\n                .attr('cursor', 'pointer');\n\n            var nodeExit = node.exit().transition()\n                .duration(duration)\n                .attr(\"transform\", function(d) {\n                    return \"translate(\" + source.y + \",\" + source.x + \")\";\n                })\n                .remove();\n\n            nodeExit.select('circle')\n                .attr('r', 1e-6);\n\n            nodeExit.select('text')\n                .style('fill-opacity', 1e-6);\n\n            var link = svg.selectAll('path.link')\n                .data(links, function(d) { return d.id; });\n\n            var linkEnter = link.enter().insert('path', \"g\")\n                .attr(\"class\", \"link\")\n                .attr('d', function(d){\n                    var o = {x: source.x0, y: source.y0};\n                    return diagonal(o, o);\n                });\n\n            var linkUpdate = linkEnter.merge(link);\n\n            linkUpdate.transition()\n                .duration(duration)\n                .attr('d', function(d){ return diagonal(d, d.parent) });\n\n            var linkExit = link.exit().transition()\n                .duration(duration)\n                .attr('d', function(d) {\n                    var o = {x: source.x, y: source.y};\n                    return diagonal(o, o);\n                })\n                .remove();\n\n            nodes.forEach(function(d){\n                d.x0 = d.x;\n                d.y0 = d.y;\n            });\n\n            function diagonal(s, d) {\n                var path = `M ${s.y} ${s.x}\n                            C ${(s.y + d.y) / 2} ${s.x},\n                              ${(s.y + d.y) / 2} ${d.x},\n                              ${d.y} ${d.x}`;\n                return path;\n            }\n\n            function click(d) {\n                if (d.children) {\n                    d._children = d.children;\n                    d.children = null;\n                } else {\n                    d.children = d._children;\n                    d._children = null;\n                }\n                update(d);\n            }\n        }\n    }, [filenameFromParams]);\n\n    return <svg ref={ref}></svg>;\n}\n\nexport default TreeVisualisation;\n"],"mappings":";;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,SAASC,IAAI,QAAQ,eAAe;AACpC,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA,EAAS;EAC5B;EAAA,IACQC,QAAQ,GAAKP,KAAK,CAACQ,QAAQ,CAA3BD,QAAQ;EAAA,IAAAE,eAAA,GACQT,KAAK,CAACQ,QAAQ,CAAC,IAAI,CAAC;IAAAE,gBAAA,GAAAC,cAAA,CAAAF,eAAA;IAArCG,IAAI,GAAAF,gBAAA;IAAEG,OAAO,GAAAH,gBAAA;EACpB,IAAMI,GAAG,GAAGZ,MAAM,CAAC,CAAC;EAEpBF,KAAK,CAACC,SAAS,CAAC,YAAM;IAClBc,KAAK,CAAC,mDAAmD,CAAC,CACrDC,IAAI,CAAC,UAAAC,QAAQ;MAAA,OAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC;IAAA,EAAC;IAClC,IAAMX,QAAQ,GAAGY,kBAAkB;IACvC,IAAIC,MAAM,GAAG;QAACC,GAAG,EAAE,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,MAAM,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAE,CAAC;MACnDC,KAAK,GAAG,GAAG,GAAGL,MAAM,CAACI,IAAI,GAAGJ,MAAM,CAACE,KAAK;MACxCI,MAAM,GAAG,GAAG,GAAGN,MAAM,CAACC,GAAG,GAAGD,MAAM,CAACG,MAAM;IAE7C,IAAII,GAAG,GAAGxB,EAAE,CAACyB,MAAM,CAACd,GAAG,CAACe,OAAO,CAAC,CAC3BC,IAAI,CAAC,OAAO,EAAEL,KAAK,GAAGL,MAAM,CAACE,KAAK,GAAGF,MAAM,CAACI,IAAI,CAAC,CACjDM,IAAI,CAAC,QAAQ,EAAEJ,MAAM,GAAGN,MAAM,CAACC,GAAG,GAAGD,MAAM,CAACG,MAAM,CAAC,CACnDQ,MAAM,CAAC,GAAG,CAAC,CACXD,IAAI,CAAC,WAAW,EAAE,YAAY,GAAGV,MAAM,CAACI,IAAI,GAAG,GAAG,GAAGJ,MAAM,CAACC,GAAG,GAAG,GAAG,CAAC;IAE3E,IAAIW,CAAC,GAAG,CAAC;MAAEC,QAAQ,GAAG,GAAG;MAAEC,IAAI;IAE/B,IAAIC,OAAO,GAAGhC,EAAE,CAACiC,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,CAACX,MAAM,EAAED,KAAK,CAAC,CAAC;;IAE7C;IACAtB,EAAE,CAACe,IAAI,yCAAAoB,MAAA,CAAyC/B,QAAQ,CAAE,CAAC,CACtDS,IAAI,CAAC,UAAAuB,QAAQ,EAAI;MACdL,IAAI,GAAG/B,EAAE,CAACqC,SAAS,CAACD,QAAQ,EAAE,UAASE,CAAC,EAAE;QAAE,OAAOA,CAAC,CAACC,QAAQ;MAAE,CAAC,CAAC;MACjER,IAAI,CAACS,EAAE,GAAGjB,MAAM,GAAG,CAAC;MACpBQ,IAAI,CAACU,EAAE,GAAG,CAAC;;MAEX;MACAV,IAAI,CAACQ,QAAQ,CAACG,OAAO,CAACC,QAAQ,CAAC;MAE/BC,MAAM,CAACb,IAAI,CAAC;IAChB,CAAC,CAAC,CACDc,KAAK,CAACC,OAAO,CAACC,KAAK,CAAC;;IAEzB;IACA,SAASJ,QAAQA,CAACL,CAAC,EAAE;MACjB,IAAGA,CAAC,CAACC,QAAQ,EAAE;QACXD,CAAC,CAACU,SAAS,GAAGV,CAAC,CAACC,QAAQ;QACxBD,CAAC,CAACU,SAAS,CAACN,OAAO,CAACC,QAAQ,CAAC;QAC7BL,CAAC,CAACC,QAAQ,GAAG,IAAI;MACrB;IACJ;IAEA,SAASK,MAAMA,CAACK,MAAM,EAAE;MACpB,IAAIb,QAAQ,GAAGJ,OAAO,CAACD,IAAI,CAAC;MAC5B,IAAImB,KAAK,GAAGd,QAAQ,CAACe,WAAW,CAAC,CAAC;QAC9BC,KAAK,GAAGhB,QAAQ,CAACe,WAAW,CAAC,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC;MAC3CH,KAAK,CAACR,OAAO,CAAC,UAASJ,CAAC,EAAC;QAAEA,CAAC,CAACgB,CAAC,GAAGhB,CAAC,CAACiB,KAAK,GAAG,GAAG;MAAA,CAAC,CAAC;MAEhD,IAAIC,IAAI,GAAGhC,GAAG,CAACiC,SAAS,CAAC,QAAQ,CAAC,CAC7BhD,IAAI,CAACyC,KAAK,EAAE,UAASZ,CAAC,EAAE;QAAC,OAAOA,CAAC,CAACoB,EAAE,KAAKpB,CAAC,CAACoB,EAAE,GAAG,EAAE7B,CAAC,CAAC;MAAE,CAAC,CAAC;MAE7D,IAAI8B,SAAS,GAAGH,IAAI,CAACI,KAAK,CAAC,CAAC,CAAChC,MAAM,CAAC,GAAG,CAAC,CACnCD,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CACrBA,IAAI,CAAC,WAAW,EAAE,UAASW,CAAC,EAAE;QAC3B,OAAO,YAAY,GAAGW,MAAM,CAACR,EAAE,GAAG,GAAG,GAAGQ,MAAM,CAACT,EAAE,GAAG,GAAG;MAC3D,CAAC,CAAC,CACDqB,EAAE,CAAC,OAAO,EAAEC,KAAK,CAAC;MAEvBH,SAAS,CAAC/B,MAAM,CAAC,QAAQ,CAAC,CACrBD,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CACrBA,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CACfoC,KAAK,CAAC,MAAM,EAAE,UAASzB,CAAC,EAAE;QACvB,OAAOA,CAAC,CAACU,SAAS,GAAG,gBAAgB,GAAG,MAAM;MAClD,CAAC,CAAC;MAENW,SAAS,CAAC/B,MAAM,CAAC,MAAM,CAAC,CACnBD,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CACnBA,IAAI,CAAC,GAAG,EAAE,UAASW,CAAC,EAAE;QACnB,OAAOA,CAAC,CAACC,QAAQ,IAAID,CAAC,CAACU,SAAS,GAAG,CAAC,EAAE,GAAG,EAAE;MAC/C,CAAC,CAAC,CACDrB,IAAI,CAAC,aAAa,EAAE,UAASW,CAAC,EAAE;QAC7B,OAAOA,CAAC,CAACC,QAAQ,IAAID,CAAC,CAACU,SAAS,GAAG,KAAK,GAAG,OAAO;MACtD,CAAC,CAAC,CACDgB,IAAI,CAAC,UAAS1B,CAAC,EAAE;QAAE,OAAOA,CAAC,CAAC7B,IAAI,CAACwD,IAAI;MAAE,CAAC,CAAC;MAE9C,IAAIC,UAAU,GAAGP,SAAS,CAACQ,KAAK,CAACX,IAAI,CAAC;MACtCU,UAAU,CAACE,UAAU,CAAC,CAAC,CAClBtC,QAAQ,CAACA,QAAQ,CAAC,CAClBH,IAAI,CAAC,WAAW,EAAE,UAASW,CAAC,EAAE;QAC3B,OAAO,YAAY,GAAGA,CAAC,CAACgB,CAAC,GAAG,GAAG,GAAGhB,CAAC,CAAC+B,CAAC,GAAG,GAAG;MAC/C,CAAC,CAAC;MAENH,UAAU,CAACzC,MAAM,CAAC,aAAa,CAAC,CAC3BE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACboC,KAAK,CAAC,MAAM,EAAE,UAASzB,CAAC,EAAE;QACvB,OAAOA,CAAC,CAACU,SAAS,GAAG,gBAAgB,GAAG,MAAM;MAClD,CAAC,CAAC,CACDrB,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC;MAE9B,IAAI2C,QAAQ,GAAGd,IAAI,CAACe,IAAI,CAAC,CAAC,CAACH,UAAU,CAAC,CAAC,CAClCtC,QAAQ,CAACA,QAAQ,CAAC,CAClBH,IAAI,CAAC,WAAW,EAAE,UAASW,CAAC,EAAE;QAC3B,OAAO,YAAY,GAAGW,MAAM,CAACK,CAAC,GAAG,GAAG,GAAGL,MAAM,CAACoB,CAAC,GAAG,GAAG;MACzD,CAAC,CAAC,CACDG,MAAM,CAAC,CAAC;MAEbF,QAAQ,CAAC7C,MAAM,CAAC,QAAQ,CAAC,CACpBE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC;MAEpB2C,QAAQ,CAAC7C,MAAM,CAAC,MAAM,CAAC,CAClBsC,KAAK,CAAC,cAAc,EAAE,IAAI,CAAC;MAEhC,IAAIU,IAAI,GAAGjD,GAAG,CAACiC,SAAS,CAAC,WAAW,CAAC,CAChChD,IAAI,CAAC2C,KAAK,EAAE,UAASd,CAAC,EAAE;QAAE,OAAOA,CAAC,CAACoB,EAAE;MAAE,CAAC,CAAC;MAE9C,IAAIgB,SAAS,GAAGD,IAAI,CAACb,KAAK,CAAC,CAAC,CAACe,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAC3ChD,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CACrBA,IAAI,CAAC,GAAG,EAAE,UAASW,CAAC,EAAC;QAClB,IAAIsC,CAAC,GAAG;UAACP,CAAC,EAAEpB,MAAM,CAACT,EAAE;UAAEc,CAAC,EAAEL,MAAM,CAACR;QAAE,CAAC;QACpC,OAAOoC,QAAQ,CAACD,CAAC,EAAEA,CAAC,CAAC;MACzB,CAAC,CAAC;MAEN,IAAIE,UAAU,GAAGJ,SAAS,CAACP,KAAK,CAACM,IAAI,CAAC;MAEtCK,UAAU,CAACV,UAAU,CAAC,CAAC,CAClBtC,QAAQ,CAACA,QAAQ,CAAC,CAClBH,IAAI,CAAC,GAAG,EAAE,UAASW,CAAC,EAAC;QAAE,OAAOuC,QAAQ,CAACvC,CAAC,EAAEA,CAAC,CAACyC,MAAM,CAAC;MAAC,CAAC,CAAC;MAE3D,IAAIC,QAAQ,GAAGP,IAAI,CAACF,IAAI,CAAC,CAAC,CAACH,UAAU,CAAC,CAAC,CAClCtC,QAAQ,CAACA,QAAQ,CAAC,CAClBH,IAAI,CAAC,GAAG,EAAE,UAASW,CAAC,EAAE;QACnB,IAAIsC,CAAC,GAAG;UAACP,CAAC,EAAEpB,MAAM,CAACoB,CAAC;UAAEf,CAAC,EAAEL,MAAM,CAACK;QAAC,CAAC;QAClC,OAAOuB,QAAQ,CAACD,CAAC,EAAEA,CAAC,CAAC;MACzB,CAAC,CAAC,CACDJ,MAAM,CAAC,CAAC;MAEbtB,KAAK,CAACR,OAAO,CAAC,UAASJ,CAAC,EAAC;QACrBA,CAAC,CAACE,EAAE,GAAGF,CAAC,CAAC+B,CAAC;QACV/B,CAAC,CAACG,EAAE,GAAGH,CAAC,CAACgB,CAAC;MACd,CAAC,CAAC;MAEF,SAASuB,QAAQA,CAACI,CAAC,EAAE3C,CAAC,EAAE;QACpB,IAAI4C,IAAI,QAAA/C,MAAA,CAAQ8C,CAAC,CAAC3B,CAAC,OAAAnB,MAAA,CAAI8C,CAAC,CAACZ,CAAC,sCAAAlC,MAAA,CACV,CAAC8C,CAAC,CAAC3B,CAAC,GAAGhB,CAAC,CAACgB,CAAC,IAAI,CAAC,OAAAnB,MAAA,CAAI8C,CAAC,CAACZ,CAAC,uCAAAlC,MAAA,CACtB,CAAC8C,CAAC,CAAC3B,CAAC,GAAGhB,CAAC,CAACgB,CAAC,IAAI,CAAC,OAAAnB,MAAA,CAAIG,CAAC,CAAC+B,CAAC,uCAAAlC,MAAA,CACtBG,CAAC,CAACgB,CAAC,OAAAnB,MAAA,CAAIG,CAAC,CAAC+B,CAAC,CAAE;QAC5B,OAAOa,IAAI;MACf;MAEA,SAASpB,KAAKA,CAACxB,CAAC,EAAE;QACd,IAAIA,CAAC,CAACC,QAAQ,EAAE;UACZD,CAAC,CAACU,SAAS,GAAGV,CAAC,CAACC,QAAQ;UACxBD,CAAC,CAACC,QAAQ,GAAG,IAAI;QACrB,CAAC,MAAM;UACHD,CAAC,CAACC,QAAQ,GAAGD,CAAC,CAACU,SAAS;UACxBV,CAAC,CAACU,SAAS,GAAG,IAAI;QACtB;QACAJ,MAAM,CAACN,CAAC,CAAC;MACb;IACJ;EACJ,CAAC,EAAE,CAACtB,kBAAkB,CAAC,CAAC;EAExB,oBAAOnB,KAAA,CAAAsF,aAAA;IAAKxE,GAAG,EAAEA,GAAI;IAAAyE,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAM,CAAC;AAChC,CAAC;AAED,eAAevF,iBAAiB"},"metadata":{},"sourceType":"module"}