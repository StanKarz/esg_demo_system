{"ast":null,"code":"import _slicedToArray from \"/Users/stan/Desktop/esg_demo_system/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TreeVisualisation.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { useParams } from 'react-router-dom';\nimport '../styles/TreeDiagram.css';\nfunction TreeVisualisation() {\n  var i = 0;\n  var duration = 750;\n  var ref = useRef(null);\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useParams = useParams(),\n    filenameFromParams = _useParams.filename;\n  var treemap = d3.tree().size([900, 800]);\n  var root = useRef(null);\n  var centerTree = function centerTree() {\n    var nodesExtent = d3.extent(svg.selectAll('.node').nodes(), function (d) {\n      var bbox = d.getBBox();\n      var matrix = d.getCTM();\n      return [matrix.e + bbox.x, matrix.e + bbox.x + bbox.width];\n    });\n    var xOffset = (nodesExtent[0] + nodesExtent[1]) / -2;\n    var scale = 0.8; // You can adjust the scale as needed\n    svgContainer.transition().duration(duration).call(zoom.transform, d3.zoomIdentity.translate(xOffset, 0).scale(scale));\n  };\n  var collapse = function collapse(d) {\n    if (d.children) {\n      d._children = d.children;\n      d._children.forEach(collapse);\n      d.children = null;\n    }\n  };\n  var centerNode = function centerNode(source) {\n    var scale = 0.8;\n    var x = -source.y * scale + 300; // 750 is half of 1500 (the size defined for the tree layout)\n    var y = -source.x * scale + 300;\n    svgContainer.transition().duration(duration).call(zoom.transform, d3.zoomIdentity.translate(x, y).scale(scale));\n  };\n  var diagonal = function diagonal(s, d) {\n    var path = \"M \".concat(s.y, \" \").concat(s.x, \"\\n                C \").concat((s.y + d.y) / 2, \" \").concat(s.x, \",\\n                  \").concat((s.y + d.y) / 2, \" \").concat(d.x, \",\\n                  \").concat(d.y, \" \").concat(d.x);\n    return path;\n  };\n  var click = function click(d) {\n    var nodeToFocus;\n    console.log(d);\n    if (d.children) {\n      d._children = d.children;\n      d.children = null;\n      nodeToFocus = d.parent;\n    } else {\n      d.children = d._children;\n      d._children = null;\n      nodeToFocus = d;\n    }\n    update(nodeToFocus);\n    centerNode(nodeToFocus);\n  };\n  var update = function update(source) {\n    var treeData = treemap(root.current);\n    var nodes = treeData.descendants();\n    var links = treeData.descendants().slice(1);\n    nodes.forEach(function (d) {\n      d.y = d.depth * 1200;\n    });\n    var node = svg.selectAll('g.node').data(nodes, function (d) {\n      return d.id || (d.id = ++i);\n    });\n    var nodeEnter = node.enter().append('g').attr('class', 'node').attr(\"transform\", function (d) {\n      return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n    }).on('click', function (event, d) {\n      return click(d);\n    });\n    var nodeUpdate = nodeEnter.merge(node);\n    nodeEnter.append('circle').attr('class', 'node').attr('r', 1e-4).style(\"fill\", function (d) {\n      return d._children ? \"lightsteelblue\" : \"#fff\";\n    });\n    nodeEnter.append('text').attr(\"dy\", \"1.5em\").attr(\"x\", function (d) {\n      return d.children || d._children ? 13 : -13;\n    }).attr(\"text-anchor\", function (d) {\n      return d.children || d._children ? \"start\" : \"end\";\n    }).text(function (d) {\n      return d.data.name;\n    });\n    nodeUpdate.transition().duration(duration).attr(\"transform\", function (d) {\n      return \"translate(\" + d.y + \",\" + d.x + \")\";\n    });\n    nodeUpdate.select('circle.node').attr('r', 15).style(\"fill\", function (d) {\n      if (d._children) {\n        return \"lightsteelblue\";\n      } else if (d.children) {\n        return \"green\";\n      } else {\n        return \"#fff\";\n      }\n    }).attr('cursor', 'pointer');\n    var nodeExit = node.exit().transition().duration(duration).attr(\"transform\", function (d) {\n      return \"translate(\" + source.y + \",\" + source.x + \")\";\n    }).remove();\n    nodeExit.select('circle').attr('r', 1e-5);\n    nodeExit.select('text').style('fill-opacity', 1e-5);\n    var link = svg.selectAll('path.link').data(links, function (d) {\n      return d.id;\n    });\n    var linkEnter = link.enter().insert('path', \"g\").attr(\"class\", \"link\").attr('d', function (d) {\n      var o = {\n        x: source.x0,\n        y: source.y0\n      };\n      return diagonal(o, o);\n    });\n    var linkUpdate = linkEnter.merge(link);\n    linkUpdate.transition().duration(duration).attr('d', function (d) {\n      return diagonal(d, d.parent);\n    });\n    var linkExit = link.exit().transition().duration(duration).attr('d', function (d) {\n      var o = {\n        x: source.x,\n        y: source.y\n      };\n      return diagonal(o, o);\n    }).remove();\n    nodes.forEach(function (d) {\n      d.x0 = d.x;\n      d.y0 = d.y;\n    });\n  };\n  var drawTree = function drawTree(treeData) {\n    // Move these initializations into drawTree\n    var svgContainer = d3.select(ref.current).attr(\"width\", \"100%\").attr(\"height\", \"100%\").style(\"overflow\", \"hidden\");\n    var zoom = d3.zoom().scaleExtent([0.5, 10]).on(\"zoom\", function (event) {\n      svg.attr(\"transform\", event.transform);\n    });\n    var svg = svgContainer.append(\"svg\").attr(\"width\", \"100%\").attr(\"height\", \"100%\").attr(\"viewBox\", \"-100 -20 2000 1000\").attr(\"preserveAspectRatio\", \"xMidYMid meet\").call(zoom).append(\"g\");\n\n    // Initialize root for the first time\n    root.current = d3.hierarchy(treeData, function (d) {\n      return d.children;\n    });\n    root.current.x0 = 375;\n    root.current.y0 = 375;\n    root.current.children.forEach(collapse);\n    update(root.current);\n    centerTree();\n  };\n  useEffect(function () {\n    d3.json(\"http://localhost:3000/processed_data/\".concat(filenameFromParams)).then(function (treeData) {\n      setData(treeData);\n    }).catch(function (error) {\n      console.error(\"Error occurred while fetching and processing data: \", error);\n    });\n  }, [filenameFromParams]);\n  useEffect(function () {\n    if (data !== null) {\n      drawTree(data);\n    }\n  }, [data]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"visualisation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }\n  }, data === null ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  }));\n}\nexport default TreeVisualisation;\n\n// useEffect(() => {\n//     d3.json(`http://localhost:3000/processed_data/${filenameFromParams}`)\n//         .then((treeData) => { \n//             setData(treeData);\n//         })\n//         .catch(error => {\n//             console.error(\"Error occurred while fetching and processing data: \", error);\n//         });\n// }, [filenameFromParams]);\n\n//  // Call drawTree whenever data changes\n//  useEffect(() => {\n//     if (data !== null) {\n//         drawTree(data);\n//     }\n// }, [data]);\n\n// const svgContainer = d3.select(ref.current)\n//     .attr(\"width\", \"100%\")\n//     .attr(\"height\", \"100%\")\n//     .style(\"overflow\", \"hidden\");\n\n// const zoom = d3.zoom()\n//     .scaleExtent([0.5, 10])\n//     .on(\"zoom\", function (event){\n//         svg.attr(\"transform\", event.transform)\n//     });\n\n// const svg = svgContainer.append(\"svg\")\n//     .attr(\"width\", \"100%\")\n//     .attr(\"height\", \"100%\")\n//     .attr(\"viewBox\", \"-100 -20 2000 1000\")\n//     .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n//     .call(zoom)\n//     .append(\"g\");\n\n// const svgWidth = ref.current.getBoundingClientRect().width;\n// const svgHeight = ref.current.getBoundingClientRect().height;\n// const treemap = d3.tree().size([svgHeight, svgWidth]);\n// const treemap = d3.tree().size([900, 800]);  // increased size\n\n// function centerTree() {\n//     svgContainer.transition()\n//         .duration(duration)\n//         .call(zoom.transform, d3.zoomIdentity.translate(prevTranslation[0], prevTranslation[1]).scale(prevZoomScale));\n// }\n\n// function centerTree() {\n//     const nodesExtent = d3.extent(svg.selectAll('.node').nodes(), function(d) {\n//         const bbox = d.getBBox();\n//         const matrix = d.getCTM();\n//         return [matrix.e + bbox.x, matrix.e + bbox.x + bbox.width];\n//     });\n\n//     const xOffset = (nodesExtent[0] + nodesExtent[1]) / -2;\n//     const scale = 0.8; // You can adjust the scale as needed\n//     svgContainer.transition()\n//         .duration(duration)\n//         .call(zoom.transform, d3.zoomIdentity.translate(xOffset, 0).scale(scale));\n// }\n\n// d3.json(`http://localhost:3000/processed_data/${filename}`)\n//   .then((treeData) => { \n//     root = d3.hierarchy(treeData, function(d) { return d.children; });\n//     root.x0 = 375;\n//     root.y0 = 375;\n//     root.children.forEach(collapse);\n//     update(root);\n//     centerTree();\n//   })\n//   .catch(error => {\n//     console.error(\"Error occurred while fetching and processing data: \", error);\n//   });\n\n//   const collapse = (d) => {\n//     if(d.children) {\n//       d._children = d.children;\n//       d._children.forEach(collapse);\n//       d.children = null;\n//     }\n\n//   const update = (source) => {\n//     const treeData = treemap(root);\n//     const nodes = treeData.descendants();\n//     const links = treeData.descendants().slice(1);\n\n//     nodes.forEach(function(d){ d.y = d.depth * 1200});\n\n//     const node = svg.selectAll('g.node')\n//         .data(nodes, function(d) {return d.id || (d.id = ++i); });\n\n//     const nodeEnter = node.enter().append('g')\n//         .attr('class', 'node')\n//         .attr(\"transform\", function(d) {\n//           return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n//       })\n//       .on('click', (event, d) => click(d));\n\n//     const nodeUpdate = nodeEnter.merge(node);\n\n//         function click(d) {\n//         let nodeToFocus;\n//         console.log(d)\n//           if (d.children) {\n//               d._children = d.children;\n//               d.children = null;\n//               nodeToFocus = d.parent;\n//             //   centerTree();\n\n//             } else {\n//               d.children = d._children;\n//               d._children = null;\n//               nodeToFocus = d;\n//             //   centerNode(d);\n\n//             }\n//           update(d);\n//           centerNode(nodeToFocus);\n//         }\n\n//         function centerNode(source){\n//                 let scale = 0.8;\n//                 let x = -source.y * scale + 300; // 750 is half of 1500 (the size defined for the tree layout)\n//                 let y = -source.x * scale + 300;\n//                 svgContainer.transition()\n//                     .duration(duration)\n//                     .call(zoom.transform, d3.zoomIdentity.translate(x, y).scale(scale));\n//         }\n\n//         // function centerTree() {\n//         //     let scale = 0.75;  // This should be a smaller value than the scale used in `centerNode`\n//         //     let x = 50;\n//         //     let y = 50;\n//         //     svgContainer.transition()\n//         //         .duration(duration)\n//         //         .call(zoom.transform, d3.zoomIdentity.translate(x, y).scale(scale));\n//         // }\n\n//         // function diagonal(s, d) {\n\n//         //   const path = `M ${s.y} ${s.x}\n//         //         C ${(s.y + d.y) / 2} ${s.x},\n//         //           ${(s.y + d.y) / 2} ${d.x},\n//         //           ${d.y} ${d.x}`\n\n//         //   return path\n//         }\n//       }\n//     }\n\n//     // ...\n\n//     return (\n//         <div className=\"visualisation\">\n//           {data === null ? \n//               <div>Loading...</div> : \n//               <div ref={ref}></div>\n//           }\n//         </div>\n//       );\n\n//   export default TreeVisualisation;","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","useParams","TreeVisualisation","i","duration","ref","_useState","_useState2","_slicedToArray","data","setData","_useParams","filenameFromParams","filename","treemap","tree","size","root","centerTree","nodesExtent","extent","svg","selectAll","nodes","d","bbox","getBBox","matrix","getCTM","e","x","width","xOffset","scale","svgContainer","transition","call","zoom","transform","zoomIdentity","translate","collapse","children","_children","forEach","centerNode","source","y","diagonal","s","path","concat","click","nodeToFocus","console","log","parent","update","treeData","current","descendants","links","slice","depth","node","id","nodeEnter","enter","append","attr","y0","x0","on","event","nodeUpdate","merge","style","text","name","select","nodeExit","exit","remove","link","linkEnter","insert","o","linkUpdate","linkExit","drawTree","scaleExtent","hierarchy","json","then","catch","error","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TreeVisualisation.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { useParams } from 'react-router-dom';\nimport '../styles/TreeDiagram.css';\n\nfunction TreeVisualisation() {\n    let i = 0;\n    const duration = 750;\n    const ref = useRef(null);\n    const [data, setData] = useState(null); \n    const { filename: filenameFromParams } = useParams();\n\n    const treemap = d3.tree().size([900, 800]);\n    const root = useRef(null);\n\n    const centerTree = () => {\n        const nodesExtent = d3.extent(svg.selectAll('.node').nodes(), function(d) {\n            const bbox = d.getBBox();\n            const matrix = d.getCTM();\n            return [matrix.e + bbox.x, matrix.e + bbox.x + bbox.width];\n        });\n\n        const xOffset = (nodesExtent[0] + nodesExtent[1]) / -2;\n        const scale = 0.8; // You can adjust the scale as needed\n        svgContainer.transition()\n            .duration(duration)\n            .call(zoom.transform, d3.zoomIdentity.translate(xOffset, 0).scale(scale));\n    }\n\n    const collapse = (d) => {\n        if(d.children) {\n          d._children = d.children;\n          d._children.forEach(collapse);\n          d.children = null;\n        }\n    }\n\n    const centerNode = (source) => {\n        let scale = 0.8;\n        let x = -source.y * scale + 300; // 750 is half of 1500 (the size defined for the tree layout)\n        let y = -source.x * scale + 300;\n        svgContainer.transition()\n            .duration(duration)\n            .call(zoom.transform, d3.zoomIdentity.translate(x, y).scale(scale));\n    }\n\n    const diagonal = (s, d) => {\n        const path = `M ${s.y} ${s.x}\n                C ${(s.y + d.y) / 2} ${s.x},\n                  ${(s.y + d.y) / 2} ${d.x},\n                  ${d.y} ${d.x}`\n        return path\n    }\n\n    const click = (d) => {\n        let nodeToFocus;\n        console.log(d)\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n            nodeToFocus = d.parent;\n        } else {\n            d.children = d._children;\n            d._children = null;\n            nodeToFocus = d;\n        }\n        update(nodeToFocus);\n        centerNode(nodeToFocus);\n    }\n\n    const update = (source) => {\n        const treeData = treemap(root.current);\n        const nodes = treeData.descendants();\n        const links = treeData.descendants().slice(1);\n\n        nodes.forEach(function(d){ d.y = d.depth * 1200 });\n        const node = svg.selectAll('g.node')\n        .data(nodes, function(d) {return d.id || (d.id = ++i); });\n\n        const nodeEnter = node.enter().append('g')\n        .attr('class', 'node')\n        .attr(\"transform\", function(d) {\n          return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n      })\n      .on('click', (event, d) => click(d));\n\n\n    const nodeUpdate = nodeEnter.merge(node);\n\n\n    nodeEnter.append('circle')\n    .attr('class', 'node')\n    .attr('r', 1e-4)\n    .style(\"fill\", function(d) {\n        return d._children ? \"lightsteelblue\" : \"#fff\";\n    });\n\n    nodeEnter.append('text')\n        .attr(\"dy\", \"1.5em\")\n        .attr(\"x\", function(d) {\n            return d.children || d._children ? 13 : -13;\n        })\n        .attr(\"text-anchor\", function(d) {\n            return d.children || d._children ? \"start\" : \"end\";\n        })\n        .text(function(d) { return d.data.name; });\n\n\n    nodeUpdate.transition()\n    .duration(duration)\n    .attr(\"transform\", function(d) { \n        return \"translate(\" + d.y + \",\" + d.x + \")\";\n    });\n\n    \n\n    nodeUpdate.select('circle.node')\n    .attr('r', 15)\n    .style(\"fill\", function(d) {\n        if (d._children) {\n            return \"lightsteelblue\";\n        } else if (d.children) {\n            return \"green\";\n        } else {\n            return \"#fff\";\n        }\n    })\n    .attr('cursor', 'pointer');\n\n    const nodeExit = node.exit().transition()\n        .duration(duration)\n        .attr(\"transform\", function(d) {\n            return \"translate(\" + source.y + \",\" + source.x + \")\";\n        })\n        .remove();\n\n    nodeExit.select('circle')\n    .attr('r', 1e-5);\n\n    nodeExit.select('text')\n    .style('fill-opacity', 1e-5);\n\n    const link = svg.selectAll('path.link')\n        .data(links, function(d) { return d.id; });\n\n    const linkEnter = link.enter().insert('path', \"g\")\n        .attr(\"class\", \"link\")\n        .attr('d', function(d){\n        var o = {x: source.x0, y: source.y0}\n        return diagonal(o, o)\n        });\n\n    const linkUpdate = linkEnter.merge(link);\n\n    linkUpdate.transition()\n        .duration(duration)\n        .attr('d', function(d){ return diagonal(d, d.parent) });\n\n    const linkExit = link.exit().transition()\n        .duration(duration)\n        .attr('d', function(d) {\n        var o = {x: source.x, y: source.y}\n        return diagonal(o, o)\n        })\n        .remove();\n\n    nodes.forEach(function(d){\n    d.x0 = d.x;\n    d.y0 = d.y;\n    });\n}\n\n    const drawTree = (treeData) => {\n        // Move these initializations into drawTree\n        const svgContainer = d3.select(ref.current)\n            .attr(\"width\", \"100%\")\n            .attr(\"height\", \"100%\")\n            .style(\"overflow\", \"hidden\");\n\n        const zoom = d3.zoom()\n            .scaleExtent([0.5, 10])\n            .on(\"zoom\", function (event){\n                svg.attr(\"transform\", event.transform)\n            });\n\n        const svg = svgContainer.append(\"svg\")\n            .attr(\"width\", \"100%\")\n            .attr(\"height\", \"100%\")\n            .attr(\"viewBox\", \"-100 -20 2000 1000\")\n            .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n            .call(zoom)\n            .append(\"g\");\n\n        // Initialize root for the first time\n        root.current = d3.hierarchy(treeData, function(d) { return d.children; });\n        root.current.x0 = 375;\n        root.current.y0 = 375;\n\n        root.current.children.forEach(collapse);\n        update(root.current);\n        centerTree();\n    }\n\n    useEffect(() => {\n        d3.json(`http://localhost:3000/processed_data/${filenameFromParams}`)\n            .then((treeData) => {\n                setData(treeData);\n            })\n            .catch(error => {\n                console.error(\"Error occurred while fetching and processing data: \", error);\n            });\n    }, [filenameFromParams]);\n\n    useEffect(() => {\n        if (data !== null) {\n            drawTree(data);\n        }\n    }, [data]);\n\n    return (\n        <div className=\"visualisation\">\n            {data === null ? \n                <div>Loading...</div> : \n                <div ref={ref}></div>\n            }\n        </div>\n    );\n}\n\nexport default TreeVisualisation;\n    \n\n\n\n\n\n\n\n\n\n\n    // useEffect(() => {\n    //     d3.json(`http://localhost:3000/processed_data/${filenameFromParams}`)\n    //         .then((treeData) => { \n    //             setData(treeData);\n    //         })\n    //         .catch(error => {\n    //             console.error(\"Error occurred while fetching and processing data: \", error);\n    //         });\n    // }, [filenameFromParams]);\n\n    //  // Call drawTree whenever data changes\n    //  useEffect(() => {\n    //     if (data !== null) {\n    //         drawTree(data);\n    //     }\n    // }, [data]);\n\n    // const svgContainer = d3.select(ref.current)\n    //     .attr(\"width\", \"100%\")\n    //     .attr(\"height\", \"100%\")\n    //     .style(\"overflow\", \"hidden\");\n\n    // const zoom = d3.zoom()\n    //     .scaleExtent([0.5, 10])\n    //     .on(\"zoom\", function (event){\n    //         svg.attr(\"transform\", event.transform)\n    //     });\n\n    // const svg = svgContainer.append(\"svg\")\n    //     .attr(\"width\", \"100%\")\n    //     .attr(\"height\", \"100%\")\n    //     .attr(\"viewBox\", \"-100 -20 2000 1000\")\n    //     .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n    //     .call(zoom)\n    //     .append(\"g\");\n\n        // const svgWidth = ref.current.getBoundingClientRect().width;\n        // const svgHeight = ref.current.getBoundingClientRect().height;\n        // const treemap = d3.tree().size([svgHeight, svgWidth]);\n        // const treemap = d3.tree().size([900, 800]);  // increased size\n\n        // function centerTree() {\n        //     svgContainer.transition()\n        //         .duration(duration)\n        //         .call(zoom.transform, d3.zoomIdentity.translate(prevTranslation[0], prevTranslation[1]).scale(prevZoomScale));\n        // }\n\n        // function centerTree() {\n        //     const nodesExtent = d3.extent(svg.selectAll('.node').nodes(), function(d) {\n        //         const bbox = d.getBBox();\n        //         const matrix = d.getCTM();\n        //         return [matrix.e + bbox.x, matrix.e + bbox.x + bbox.width];\n        //     });\n        \n        //     const xOffset = (nodesExtent[0] + nodesExtent[1]) / -2;\n        //     const scale = 0.8; // You can adjust the scale as needed\n        //     svgContainer.transition()\n        //         .duration(duration)\n        //         .call(zoom.transform, d3.zoomIdentity.translate(xOffset, 0).scale(scale));\n        // }\n        \n\n\n\n    // d3.json(`http://localhost:3000/processed_data/${filename}`)\n    //   .then((treeData) => { \n    //     root = d3.hierarchy(treeData, function(d) { return d.children; });\n    //     root.x0 = 375;\n    //     root.y0 = 375;\n    //     root.children.forEach(collapse);\n    //     update(root);\n    //     centerTree();\n    //   })\n    //   .catch(error => {\n    //     console.error(\"Error occurred while fetching and processing data: \", error);\n    //   });\n\n    //   const collapse = (d) => {\n    //     if(d.children) {\n    //       d._children = d.children;\n    //       d._children.forEach(collapse);\n    //       d.children = null;\n    //     }\n      \n\n    //   const update = (source) => {\n    //     const treeData = treemap(root);\n    //     const nodes = treeData.descendants();\n    //     const links = treeData.descendants().slice(1);\n  \n    //     nodes.forEach(function(d){ d.y = d.depth * 1200});\n  \n    //     const node = svg.selectAll('g.node')\n    //         .data(nodes, function(d) {return d.id || (d.id = ++i); });\n  \n    //     const nodeEnter = node.enter().append('g')\n    //         .attr('class', 'node')\n    //         .attr(\"transform\", function(d) {\n    //           return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n    //       })\n    //       .on('click', (event, d) => click(d));\n\n\n    //     const nodeUpdate = nodeEnter.merge(node);\n\n  \n\n  \n//         function click(d) {\n//         let nodeToFocus;\n//         console.log(d)\n//           if (d.children) {\n//               d._children = d.children;\n//               d.children = null;\n//               nodeToFocus = d.parent;\n//             //   centerTree();\n\n//             } else {\n//               d.children = d._children;\n//               d._children = null;\n//               nodeToFocus = d;\n//             //   centerNode(d);\n\n//             }\n//           update(d);\n//           centerNode(nodeToFocus);\n//         }\n\n//         function centerNode(source){\n//                 let scale = 0.8;\n//                 let x = -source.y * scale + 300; // 750 is half of 1500 (the size defined for the tree layout)\n//                 let y = -source.x * scale + 300;\n//                 svgContainer.transition()\n//                     .duration(duration)\n//                     .call(zoom.transform, d3.zoomIdentity.translate(x, y).scale(scale));\n//         }\n\n//         // function centerTree() {\n//         //     let scale = 0.75;  // This should be a smaller value than the scale used in `centerNode`\n//         //     let x = 50;\n//         //     let y = 50;\n//         //     svgContainer.transition()\n//         //         .duration(duration)\n//         //         .call(zoom.transform, d3.zoomIdentity.translate(x, y).scale(scale));\n//         // }\n     \n//         // function diagonal(s, d) {\n  \n//         //   const path = `M ${s.y} ${s.x}\n//         //         C ${(s.y + d.y) / 2} ${s.x},\n//         //           ${(s.y + d.y) / 2} ${d.x},\n//         //           ${d.y} ${d.x}`\n  \n//         //   return path\n//         }\n//       }\n//     }\n  \n//     // ...\n  \n//     return (\n//         <div className=\"visualisation\">\n//           {data === null ? \n//               <div>Loading...</div> : \n//               <div ref={ref}></div>\n//           }\n//         </div>\n//       );\n  \n//   export default TreeVisualisation;\n"],"mappings":"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C,YAAA;IAAA;EAAA,GAAK,YAAe,CAAC,gBACrB3G,KAAA,CAAAoG,aAAA;IAAK3F,GAAG,EAAEA,GAAI;IAAA6F,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAM,CAEvB,CAAC;AAEd;AAEA,eAAerG,iBAAiB;;AAY5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAKJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAKJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}