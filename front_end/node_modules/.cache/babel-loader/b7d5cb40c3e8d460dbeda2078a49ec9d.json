{"ast":null,"code":"var _jsxFileName = \"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TreeVisualisation.js\";\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { useParams } from 'react-router-dom';\nfunction TreeVisualisation() {\n  var _useParams = useParams(),\n    filenameFromParams = _useParams.filename;\n  var ref = useRef();\n  useEffect(function () {\n    drawTree(filenameFromParams);\n  }, [filenameFromParams]);\n  var drawTree = function drawTree(filename) {\n    d3.select(ref.current).selectAll(\"*\").remove();\n    var margin = {\n        top: 20,\n        right: 90,\n        bottom: 30,\n        left: 90\n      },\n      width = 2000 - margin.left - margin.right,\n      height = 1000 - margin.top - margin.bottom;\n    var svg = d3.select(ref.current).attr(\"width\", \"100%\").attr(\"height\", \"100%\").attr(\"viewBox\", \"0 0 \".concat(width + margin.right + margin.left, \" \").concat(height + margin.top + margin.bottom)).attr(\"preserveAspectRatio\", \"xMidYMid meet\").append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    var treemap = d3.tree().size([height, width]);\n    d3.json(\"http://localhost:3000/processed_data/\".concat(filename)).then(function (treeData) {\n      var root = d3.hierarchy(treeData, function (d) {\n        return d.children;\n      });\n      root.x0 = height / 2;\n      root.y0 = width / 2;\n      // Collapse after the second level\n      root.children.forEach(collapse);\n      update(root);\n    }).catch(function (error) {\n      console.error(\"Error occurred while fetching and processing data: \", error);\n    });\n    function collapse(d) {\n      if (d.children) {\n        d._children = d.children;\n        d._children.forEach(collapse);\n        d.children = null;\n      }\n    }\n    function update(source) {\n      // Assigns the x and y position for the nodes\n      var treeData = treemap(root);\n\n      // adjust these values based on how much padding you want around the tree\n      var treePadding = 100;\n\n      // find the maximum and minimum x and y values\n      var xMax = d3.max(treeData.descendants(), function (d) {\n        return d.x;\n      });\n      var xMin = d3.min(treeData.descendants(), function (d) {\n        return d.x;\n      });\n      var yMax = d3.max(treeData.descendants(), function (d) {\n        return d.y;\n      });\n\n      // Compute the new tree layout.\n      var nodes = treeData.descendants(),\n        links = treeData.descendants().slice(1);\n\n      // Normalize for fixed-depth.\n      nodes.forEach(function (d) {\n        d.y = d.depth * 1200;\n      });\n\n      // ****************** Nodes section ***************************\n\n      // Update the nodes...\n      var node = svg.selectAll('g.node').data(nodes, function (d) {\n        return d.id || (d.id = ++i);\n      });\n\n      // Enter any new modes at the parent's previous position.\n      var nodeEnter = node.enter().append('g').attr('class', 'node').attr(\"transform\", function (d) {\n        return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n      }).on('click', click);\n\n      // Add Circle for the nodes\n      nodeEnter.append('circle').attr('class', 'node').attr('r', 1e-4).style(\"fill\", function (d) {\n        return d._children ? \"lightsteelblue\" : \"#fff\";\n      });\n\n      // Add labels for the nodes\n      nodeEnter.append('text').attr(\"dy\", \".85em\").attr(\"x\", function (d) {\n        return d.children || d._children ? -13 : 13;\n      }).attr(\"text-anchor\", function (d) {\n        return d.children || d._children ? \"end\" : \"start\";\n      }).text(function (d) {\n        return d.data.name;\n      });\n\n      // UPDATE\n      var nodeUpdate = nodeEnter.merge(node);\n\n      // Transition to the proper position for the node\n      nodeUpdate.transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + d.y + \",\" + d.x + \")\";\n      });\n\n      // Update the node attributes and style\n      nodeUpdate.select('circle.node').attr('r', 15).style(\"fill\", function (d) {\n        return d._children ? \"lightsteelblue\" : \"#fff\";\n      }).attr('cursor', 'pointer');\n      nodeUpdate.select('circle.node').attr('r', 15).style(\"fill\", function (d) {\n        // change the fill color depending on whether the node has children or not\n        if (d._children) {\n          // collapsed nodes\n          return \"lightsteelblue\";\n        } else if (d.children) {\n          // expanded nodes\n          return \"green\"; // change this to whatever color you want for expanded nodes\n        } else {\n          // leaf nodes\n          return \"#fff\";\n        }\n      }).attr('cursor', 'pointer');\n\n      // Remove any exiting nodes\n      var nodeExit = node.exit().transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + source.y + \",\" + source.x + \")\";\n      }).remove();\n\n      // On exit reduce the node circles size to 0\n      nodeExit.select('circle').attr('r', 1e-5);\n\n      // On exit reduce the opacity of text labels\n      nodeExit.select('text').style('fill-opacity', 1e-5);\n\n      // ****************** links section ***************************\n\n      // Update the links...\n      var link = svg.selectAll('path.link').data(links, function (d) {\n        return d.id;\n      });\n\n      // Enter any new links at the parent's previous position.\n      var linkEnter = link.enter().insert('path', \"g\").attr(\"class\", \"link\").attr('d', function (d) {\n        var o = {\n          x: source.x0,\n          y: source.y0\n        };\n        return diagonal(o, o);\n      });\n\n      // UPDATE\n      var linkUpdate = linkEnter.merge(link);\n\n      // Transition back to the parent element position\n      linkUpdate.transition().duration(duration).attr('d', function (d) {\n        return diagonal(d, d.parent);\n      });\n\n      // Remove any exiting links\n      var linkExit = link.exit().transition().duration(duration).attr('d', function (d) {\n        var o = {\n          x: source.x,\n          y: source.y\n        };\n        return diagonal(o, o);\n      }).remove();\n\n      // Store the old positions for transition.\n      nodes.forEach(function (d) {\n        d.x0 = d.x;\n        d.y0 = d.y;\n      });\n\n      // Get the bounds of the tree\n      var bounds = svg.node().getBBox();\n      var x0 = Infinity;\n      var x1 = -x0;\n      nodes.forEach(function (d) {\n        if (d.x > x1) x1 = d.x;\n        if (d.x < x0) x0 = d.x;\n      });\n\n      // Calculate the scale to fit the tree into view\n      var scale = Math.min(width / bounds.width, height / bounds.height);\n\n      // Adjust the height of the svg to fit the tree\n      height = x1 - x0 + margin.top + margin.bottom;\n      svg.attr(\"height\", height);\n\n      // Creates a curved (diagonal) path from parent to the child nodes\n      function diagonal(s, d) {\n        path = \"M \".concat(s.y, \" \").concat(s.x, \"\\n        C \").concat((s.y + d.y) / 2, \" \").concat(s.x, \",\\n          \").concat((s.y + d.y) / 2, \" \").concat(d.x, \",\\n          \").concat(d.y, \" \").concat(d.x);\n        return path;\n      }\n      // Here you'd insert the bulk of the code you provided before - specifically everything that's supposed to go inside the update function.\n      // You'll need to replace every instance of `treeData` with `root`, and `svg` with `svgGroup`\n\n      // Assigns the x and y position for the nodes\n      var treeData = treemap(root);\n\n      // Compute the new tree layout.\n      var nodes = treeData.descendants(),\n        links = treeData.descendants().slice(1);\n\n      // Normalize for fixed-depth.\n      nodes.forEach(function (d) {\n        d.y = d.depth * 180;\n      });\n\n      // ****************** Nodes section ***************************\n\n      // Update the nodes...\n      var node = svg.selectAll('g.node').data(nodes, function (d) {\n        return d.id || (d.id = ++i);\n      });\n\n      // Enter any new modes at the parent's previous position.\n      var nodeEnter = node.enter().append('g').attr('class', 'node').attr(\"transform\", function (d) {\n        return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n      }).on('click', click);\n\n      // Add Circle for the nodes\n      nodeEnter.append('circle').attr('class', 'node').attr('r', 1e-6).style(\"fill\", function (d) {\n        return d._children ? \"lightsteelblue\" : \"#fff\";\n      });\n\n      // Add labels for the nodes\n      nodeEnter.append('text').attr(\"dy\", \".35em\").attr(\"x\", function (d) {\n        return d.children || d._children ? -13 : 13;\n      }).attr(\"text-anchor\", function (d) {\n        return d.children || d._children ? \"end\" : \"start\";\n      }).text(function (d) {\n        return d.data.name;\n      });\n\n      // UPDATE\n      var nodeUpdate = nodeEnter.merge(node);\n\n      // Transition to the proper position for the node\n      nodeUpdate.transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + d.y + \",\" + d.x + \")\";\n      });\n\n      // Update the node attributes and style\n      nodeUpdate.select('circle.node').attr('r', 10).style(\"fill\", function (d) {\n        return d._children ? \"lightsteelblue\" : \"#fff\";\n      }).attr('cursor', 'pointer');\n\n      // Remove any exiting nodes\n      var nodeExit = node.exit().transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + source.y + \",\" + source.x + \")\";\n      }).remove();\n\n      // On exit reduce the node circles size to 0\n      nodeExit.select('circle').attr('r', 1e-6);\n\n      // On exit reduce the opacity of text labels\n      nodeExit.select('text').style('fill-opacity', 1e-6);\n\n      // ****************** links section ***************************\n\n      // Update the links...\n      var link = svg.selectAll('path.link').data(links, function (d) {\n        return d.id;\n      });\n\n      // Enter any new links at the parent's previous position.\n      var linkEnter = link.enter().insert('path', \"g\").attr(\"class\", \"link\").attr('d', function (d) {\n        var o = {\n          x: source.x0,\n          y: source.y0\n        };\n        return diagonal(o, o);\n      });\n\n      // UPDATE\n      var linkUpdate = linkEnter.merge(link);\n\n      // Transition back to the parent element position\n      linkUpdate.transition().duration(duration).attr('d', function (d) {\n        return diagonal(d, d.parent);\n      });\n\n      // Remove any exiting links\n      var linkExit = link.exit().transition().duration(duration).attr('d', function (d) {\n        var o = {\n          x: source.x,\n          y: source.y\n        };\n        return diagonal(o, o);\n      }).remove();\n\n      // Store the old positions for transition.\n      nodes.forEach(function (d) {\n        d.x0 = d.x;\n        d.y0 = d.y;\n      });\n\n      // Creates a curved (diagonal) path from parent to the child nodes\n      function diagonal(s, d) {\n        path = \"M \".concat(s.y, \" \").concat(s.x, \"\\n                C \").concat((s.y + d.y) / 2, \" \").concat(s.x, \",\\n                  \").concat((s.y + d.y) / 2, \" \").concat(d.x, \",\\n                  \").concat(d.y, \" \").concat(d.x);\n        return path;\n      }\n\n      // Toggle children on click.\n      function click(d) {\n        if (d.children) {\n          d._children = d.children;\n          d.children = null;\n        } else {\n          d.children = d._children;\n          d._children = null;\n        }\n        update(d);\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 11\n    }\n  }, filenameFromParams), /*#__PURE__*/React.createElement(\"svg\", {\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 11\n    }\n  }));\n}\nexport default TreeVisualisation;","map":{"version":3,"names":["React","useEffect","useRef","d3","useParams","TreeVisualisation","_useParams","filenameFromParams","filename","ref","drawTree","select","current","selectAll","remove","margin","top","right","bottom","left","width","height","svg","attr","concat","append","treemap","tree","size","json","then","treeData","root","hierarchy","d","children","x0","y0","forEach","collapse","update","catch","error","console","_children","source","treePadding","xMax","max","descendants","x","xMin","min","yMax","y","nodes","links","slice","depth","node","data","id","i","nodeEnter","enter","on","click","style","text","name","nodeUpdate","merge","transition","duration","nodeExit","exit","link","linkEnter","insert","o","diagonal","linkUpdate","parent","linkExit","bounds","getBBox","Infinity","x1","scale","Math","s","path","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TreeVisualisation.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { useParams } from 'react-router-dom';\n\nfunction TreeVisualisation() {\n  const { filename: filenameFromParams } = useParams();\n  const ref = useRef();\n\n  useEffect(() => {\n    drawTree(filenameFromParams);\n  }, [filenameFromParams]);\n\n  const drawTree = (filename) => {\n    d3.select(ref.current).selectAll(\"*\").remove();\n\n    var margin = {top: 20, right: 90, bottom: 30, left: 90},\n        width = 2000 - margin.left - margin.right,\n        height = 1000 - margin.top - margin.bottom;\n\n    var svg = d3.select(ref.current)\n        .attr(\"width\", \"100%\")\n        .attr(\"height\", \"100%\")\n        .attr(\"viewBox\", `0 0 ${width + margin.right + margin.left} ${height + margin.top + margin.bottom}`)\n        .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    var treemap = d3.tree().size([height, width]);\n\n    d3.json(`http://localhost:3000/processed_data/${filename}`)\n    .then((treeData) => { \n      var root = d3.hierarchy(treeData, function(d) { return d.children; });\n      root.x0 = height / 2;\n      root.y0 = width / 2;\n      // Collapse after the second level\n      root.children.forEach(collapse);\n\n      update(root);\n    })\n    .catch(error => {\n      console.error(\"Error occurred while fetching and processing data: \", error);\n    });\n\n    function collapse(d) {\n      if(d.children) {\n          d._children = d.children;\n          d._children.forEach(collapse);\n          d.children = null;\n      }\n    }\n\n    function update(source) {\n\n            // Assigns the x and y position for the nodes\n        var treeData = treemap(root);\n\n        // adjust these values based on how much padding you want around the tree\n        var treePadding = 100;\n\n        // find the maximum and minimum x and y values\n        var xMax = d3.max(treeData.descendants(), function(d) { return d.x; });\n        var xMin = d3.min(treeData.descendants(), function(d) { return d.x; });\n        var yMax = d3.max(treeData.descendants(), function(d) { return d.y; });\n\n        // Compute the new tree layout.\n        var nodes = treeData.descendants(),\n            links = treeData.descendants().slice(1);\n\n        // Normalize for fixed-depth.\n        nodes.forEach(function(d){ d.y = d.depth * 1200});\n\n\n\n        // ****************** Nodes section ***************************\n\n  // Update the nodes...\n  var node = svg.selectAll('g.node')\n  .data(nodes, function(d) {return d.id || (d.id = ++i); });\n\n// Enter any new modes at the parent's previous position.\nvar nodeEnter = node.enter().append('g')\n  .attr('class', 'node')\n  .attr(\"transform\", function(d) {\n    return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n})\n.on('click', click);\n\n// Add Circle for the nodes\nnodeEnter.append('circle')\n  .attr('class', 'node')\n  .attr('r', 1e-4)\n  .style(\"fill\", function(d) {\n      return d._children ? \"lightsteelblue\" : \"#fff\";\n  });\n\n// Add labels for the nodes\nnodeEnter.append('text')\n  .attr(\"dy\", \".85em\")\n  .attr(\"x\", function(d) {\n      return d.children || d._children ? -13 : 13;\n  })\n  .attr(\"text-anchor\", function(d) {\n      return d.children || d._children ? \"end\" : \"start\";\n  })\n  .text(function(d) { return d.data.name; });\n\n// UPDATE\nvar nodeUpdate = nodeEnter.merge(node);\n\n// Transition to the proper position for the node\nnodeUpdate.transition()\n.duration(duration)\n.attr(\"transform\", function(d) { \n    return \"translate(\" + d.y + \",\" + d.x + \")\";\n });\n\n// Update the node attributes and style\nnodeUpdate.select('circle.node')\n.attr('r', 15)\n.style(\"fill\", function(d) {\n    return d._children ? \"lightsteelblue\" : \"#fff\";\n})\n.attr('cursor', 'pointer');\n\n\nnodeUpdate.select('circle.node')\n.attr('r', 15)\n.style(\"fill\", function(d) {\n// change the fill color depending on whether the node has children or not\nif (d._children) {  // collapsed nodes\n  return \"lightsteelblue\"; \n} else if (d.children) {  // expanded nodes\n  return \"green\";  // change this to whatever color you want for expanded nodes\n} else {  // leaf nodes\n  return \"#fff\";\n}\n})\n.attr('cursor', 'pointer');\n\n\n// Remove any exiting nodes\nvar nodeExit = node.exit().transition()\n  .duration(duration)\n  .attr(\"transform\", function(d) {\n      return \"translate(\" + source.y + \",\" + source.x + \")\";\n  })\n  .remove();\n\n// On exit reduce the node circles size to 0\nnodeExit.select('circle')\n.attr('r', 1e-5);\n\n// On exit reduce the opacity of text labels\nnodeExit.select('text')\n.style('fill-opacity', 1e-5);\n\n// ****************** links section ***************************\n\n// Update the links...\nvar link = svg.selectAll('path.link')\n  .data(links, function(d) { return d.id; });\n\n// Enter any new links at the parent's previous position.\nvar linkEnter = link.enter().insert('path', \"g\")\n  .attr(\"class\", \"link\")\n  .attr('d', function(d){\n    var o = {x: source.x0, y: source.y0}\n    return diagonal(o, o)\n  });\n\n// UPDATE\nvar linkUpdate = linkEnter.merge(link);\n\n// Transition back to the parent element position\nlinkUpdate.transition()\n  .duration(duration)\n  .attr('d', function(d){ return diagonal(d, d.parent) });\n\n// Remove any exiting links\nvar linkExit = link.exit().transition()\n  .duration(duration)\n  .attr('d', function(d) {\n    var o = {x: source.x, y: source.y}\n    return diagonal(o, o)\n  })\n  .remove();\n\n// Store the old positions for transition.\nnodes.forEach(function(d){\nd.x0 = d.x;\nd.y0 = d.y;\n});\n\n// Get the bounds of the tree\nvar bounds = svg.node().getBBox();\nvar x0 = Infinity;\nvar x1 = -x0;\nnodes.forEach(function(d) {\nif (d.x > x1) x1 = d.x;\nif (d.x < x0) x0 = d.x;\n});\n\n// Calculate the scale to fit the tree into view\nvar scale = Math.min(width / bounds.width, height / bounds.height);\n\n\n\n// Adjust the height of the svg to fit the tree\nheight = x1 - x0 + margin.top + margin.bottom;\n\nsvg.attr(\"height\", height);\n\n// Creates a curved (diagonal) path from parent to the child nodes\nfunction diagonal(s, d) {\n\npath = `M ${s.y} ${s.x}\n        C ${(s.y + d.y) / 2} ${s.x},\n          ${(s.y + d.y) / 2} ${d.x},\n          ${d.y} ${d.x}`\n\nreturn path\n}\n      // Here you'd insert the bulk of the code you provided before - specifically everything that's supposed to go inside the update function.\n      // You'll need to replace every instance of `treeData` with `root`, and `svg` with `svgGroup`\n\n      // Assigns the x and y position for the nodes\n      var treeData = treemap(root);\n\n      // Compute the new tree layout.\n      var nodes = treeData.descendants(),\n          links = treeData.descendants().slice(1);\n\n      // Normalize for fixed-depth.\n      nodes.forEach(function(d){ d.y = d.depth * 180});\n\n      // ****************** Nodes section ***************************\n\n      // Update the nodes...\n      var node = svg.selectAll('g.node')\n          .data(nodes, function(d) {return d.id || (d.id = ++i); });\n\n      // Enter any new modes at the parent's previous position.\n      var nodeEnter = node.enter().append('g')\n          .attr('class', 'node')\n          .attr(\"transform\", function(d) {\n            return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n        })\n        .on('click', click);\n\n      // Add Circle for the nodes\n      nodeEnter.append('circle')\n          .attr('class', 'node')\n          .attr('r', 1e-6)\n          .style(\"fill\", function(d) {\n              return d._children ? \"lightsteelblue\" : \"#fff\";\n          });\n\n      // Add labels for the nodes\n      nodeEnter.append('text')\n          .attr(\"dy\", \".35em\")\n          .attr(\"x\", function(d) {\n              return d.children || d._children ? -13 : 13;\n          })\n          .attr(\"text-anchor\", function(d) {\n              return d.children || d._children ? \"end\" : \"start\";\n          })\n          .text(function(d) { return d.data.name; });\n\n      // UPDATE\n      var nodeUpdate = nodeEnter.merge(node);\n\n      // Transition to the proper position for the node\n      nodeUpdate.transition()\n        .duration(duration)\n        .attr(\"transform\", function(d) { \n            return \"translate(\" + d.y + \",\" + d.x + \")\";\n         });\n\n      // Update the node attributes and style\n      nodeUpdate.select('circle.node')\n        .attr('r', 10)\n        .style(\"fill\", function(d) {\n            return d._children ? \"lightsteelblue\" : \"#fff\";\n        })\n        .attr('cursor', 'pointer');\n\n\n      // Remove any exiting nodes\n      var nodeExit = node.exit().transition()\n          .duration(duration)\n          .attr(\"transform\", function(d) {\n              return \"translate(\" + source.y + \",\" + source.x + \")\";\n          })\n          .remove();\n\n      // On exit reduce the node circles size to 0\n      nodeExit.select('circle')\n        .attr('r', 1e-6);\n\n      // On exit reduce the opacity of text labels\n      nodeExit.select('text')\n        .style('fill-opacity', 1e-6);\n\n      // ****************** links section ***************************\n\n      // Update the links...\n      var link = svg.selectAll('path.link')\n          .data(links, function(d) { return d.id; });\n\n      // Enter any new links at the parent's previous position.\n      var linkEnter = link.enter().insert('path', \"g\")\n          .attr(\"class\", \"link\")\n          .attr('d', function(d){\n            var o = {x: source.x0, y: source.y0}\n            return diagonal(o, o)\n          });\n\n      // UPDATE\n      var linkUpdate = linkEnter.merge(link);\n\n      // Transition back to the parent element position\n      linkUpdate.transition()\n          .duration(duration)\n          .attr('d', function(d){ return diagonal(d, d.parent) });\n\n      // Remove any exiting links\n      var linkExit = link.exit().transition()\n          .duration(duration)\n          .attr('d', function(d) {\n            var o = {x: source.x, y: source.y}\n            return diagonal(o, o)\n          })\n          .remove();\n\n      // Store the old positions for transition.\n      nodes.forEach(function(d){\n        d.x0 = d.x;\n        d.y0 = d.y;\n      });\n\n      // Creates a curved (diagonal) path from parent to the child nodes\n      function diagonal(s, d) {\n        path = `M ${s.y} ${s.x}\n                C ${(s.y + d.y) / 2} ${s.x},\n                  ${(s.y + d.y) / 2} ${d.x},\n                  ${d.y} ${d.x}`\n\n        return path\n      }\n\n      // Toggle children on click.\n      function click(d) {\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n        } else {\n            d.children = d._children;\n            d._children = null;\n        }\n        update(d);\n      }\n\n    }\n  }\n\n  return (\n      <div>\n          <h1>{filenameFromParams}</h1>\n          <svg ref={ref}></svg>\n      </div>\n  );\n}\n\nexport default TreeVisualisation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}