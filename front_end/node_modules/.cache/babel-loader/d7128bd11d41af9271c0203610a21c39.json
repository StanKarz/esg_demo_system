{"ast":null,"code":"var _jsxFileName = \"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TreeVisualisation.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { useParams } from 'react-router-dom';\nimport '../styles/TreeDiagram.css';\nfunction TreeVisualisation() {\n  var _useParams = useParams(),\n    filenameFromParams = _useParams.filename; // const [filenameFromParams, setFilenameFromParams] = useState('Default File Name');\n  var ref = useRef(null);\n  useEffect(function () {\n    drawTree(filenameFromParams);\n  }, [filenameFromParams]);\n  var centerNode = function centerNode(source) {\n    var scale = 0.8;\n    var x = -source.y0 * scale + width / 2;\n    var y = -source * x0 * scale + height / 2;\n    svg.transition().duration(duration).call(dr.zoom().transform, d3.zoomIdentity.translate(x, y).scale(scale));\n  };\n  var drawTree = function drawTree(filename) {\n    var i = 0;\n    var duration = 750;\n    var root;\n    d3.select(ref.current).selectAll(\"*\").remove();\n    var margin = {\n        top: 20,\n        right: 90,\n        bottom: 30,\n        left: 90\n      },\n      width = 2000 - margin.left - margin.right,\n      height = 1000 - margin.top - margin.bottom;\n    var svg = d3.select(ref.current).attr(\"width\", \"100%\").attr(\"height\", \"100%\").attr(\"viewBox\", \"0 0 \".concat(width + margin.right + margin.left, \" \").concat(height + margin.top + margin.bottom)).attr(\"preserveAspectRatio\", \"xMidYMid meet\").append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    var treemap = d3.tree().size([height, width]);\n    d3.json(\"http://localhost:3000/processed_data/\".concat(filename)).then(function (treeData) {\n      root = d3.hierarchy(treeData, function (d) {\n        return d.children;\n      });\n      root.x0 = height / 2;\n      //   root.y0 = width / 2;\n      root.y0 = 0;\n      // Collapse after the second level\n      root.children.forEach(collapse);\n      update(root);\n    }).catch(function (error) {\n      console.error(\"Error occurred while fetching and processing data: \", error);\n    });\n    function collapse(d) {\n      if (d && d.children) {\n        d._children = d.children;\n        d._children.forEach(collapse);\n        d.children = null;\n      }\n    }\n    function update(source) {\n      // Assigns the x and y position for the nodes\n      var treeData = treemap(root);\n\n      // adjust these values based on how much padding you want around the tree\n      var treePadding = 100;\n\n      // find the maximum and minimum x and y values\n      var xMax = d3.max(treeData.descendants(), function (d) {\n        return d.x;\n      });\n      var xMin = d3.min(treeData.descendants(), function (d) {\n        return d.x;\n      });\n      var yMax = d3.max(treeData.descendants(), function (d) {\n        return d.y;\n      });\n\n      // Compute the new tree layout.\n      var nodes = treeData.descendants(),\n        links = treeData.descendants().slice(1);\n\n      // Normalize for fixed-depth.\n      nodes.forEach(function (d) {\n        d.y = d.depth * 1200;\n      });\n\n      // ****************** Nodes section ***************************\n\n      // Update the nodes...\n      var node = svg.selectAll('g.node').data(nodes, function (d) {\n        return d.id || (d.id = ++i);\n      });\n\n      // Enter any new modes at the parent's previous position.\n      var nodeEnter = node.enter().append('g').attr('class', 'node').attr(\"transform\", function (d) {\n        return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n      }).on('click', click);\n\n      // Add Circle for the nodes\n      nodeEnter.append('circle').attr('class', 'node').attr('r', 1e-6).style(\"fill\", function (d) {\n        return d._children && d._children_length > 0 ? \"lightsteelblue\" : \"#fff\";\n      }).on(\"click\", function (d) {\n        return click(d);\n      });\n\n      // Add labels for the nodes\n      nodeEnter.append('text').attr(\"dy\", \".85em\").attr(\"x\", function (d) {\n        return d.children && d.children.length > 0 || d._children && d._children.length > 0 ? -13 : 13;\n      }).attr(\"text-anchor\", function (d) {\n        return d.children || d._children ? \"end\" : \"start\";\n      }).text(function (d) {\n        return d.data.name;\n      }).on(\"click\", function (d) {\n        return click(d);\n      });\n\n      // UPDATE\n      var nodeUpdate = nodeEnter.merge(node);\n\n      // Transition to the proper position for the node\n      nodeUpdate.transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + d.y + \",\" + d.x + \")\";\n      });\n\n      // Update the node attributes and style\n      nodeUpdate.select('circle.node').attr('r', 15).style(\"fill\", function (d) {\n        return d._children && d._children.length > 0 ? \"lightsteelblue\" : \"#fff\";\n      }).attr('cursor', 'pointer');\n      nodeUpdate.select('circle.node').attr('r', 15).style(\"fill\", function (d) {\n        // change the fill color depending on whether the node has children or not\n        if (d._children) {\n          // collapsed nodes\n          return \"lightsteelblue\";\n        } else if (d.children) {\n          // expanded nodes\n          return \"green\"; // change this to whatever color you want for expanded nodes\n        } else {\n          // leaf nodes\n          return \"#fff\";\n        }\n      }).attr('cursor', 'pointer');\n\n      // Remove any exiting nodes\n      var nodeExit = node.exit().transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + source.y + \",\" + source.x + \")\";\n      }).remove();\n\n      // On exit reduce the node circles size to 0\n      nodeExit.select('circle').attr('r', 1e-5);\n\n      // On exit reduce the opacity of text labels\n      nodeExit.select('text').style('fill-opacity', 1e-5);\n\n      // ****************** links section ***************************\n\n      // Update the links...\n      var link = svg.selectAll('path.link').data(links, function (d) {\n        return d.id;\n      });\n\n      // Enter any new links at the parent's previous position.\n      var linkEnter = link.enter().insert('path', \"g\").attr(\"class\", \"link\").attr('d', function (d) {\n        var o = {\n          x: source.x0,\n          y: source.y0\n        };\n        return diagonal(o, o);\n      });\n\n      // UPDATE\n      var linkUpdate = linkEnter.merge(link);\n\n      // Transition back to the parent element position\n      linkUpdate.transition().duration(duration).attr('d', function (d) {\n        return diagonal(d, d.parent);\n      });\n\n      // Remove any exiting links\n      var linkExit = link.exit().transition().duration(duration).attr('d', function (d) {\n        var o = {\n          x: source.x,\n          y: source.y\n        };\n        return diagonal(o, o);\n      }).remove();\n\n      // Store the old positions for transition.\n      nodes.forEach(function (d) {\n        d.x0 = d.x;\n        d.y0 = d.y;\n      });\n\n      // Get the bounds of the tree\n      var bounds = svg.node().getBBox();\n      var x0 = Infinity;\n      var x1 = -x0;\n      nodes.forEach(function (d) {\n        if (d.x > x1) x1 = d.x;\n        if (d.x < x0) x0 = d.x;\n      });\n\n      // Calculate the scale to fit the tree into view\n      var scale = Math.min(width / bounds.width, height / bounds.height);\n\n      // Adjust the height of the svg to fit the tree\n      height = x1 - x0 + margin.top + margin.bottom;\n      svg.attr(\"height\", height);\n\n      // Creates a curved (diagonal) path from parent to the child nodes\n      function diagonal(s, d) {\n        var path = \"M \".concat(s.y, \" \").concat(s.x, \"\\nC \").concat((s.y + d.y) / 2, \" \").concat(s.x, \",\\n    \").concat((s.y + d.y) / 2, \" \").concat(d.x, \",\\n    \").concat(d.y, \" \").concat(d.x);\n        return path;\n      }\n\n      // Here you'd insert the bulk of the code you provided before - specifically everything that's supposed to go inside the update function.\n      // You'll need to replace every instance of `treeData` with `root`, and `svg` with `svgGroup`\n\n      // Assigns the x and y position for the nodes\n      var treeData = treemap(root);\n\n      // Compute the new tree layout.\n      var nodes = treeData.descendants(),\n        links = treeData.descendants().slice(1);\n\n      // Normalize for fixed-depth.\n      nodes.forEach(function (d) {\n        d.y = d.depth * 180;\n      });\n\n      // ****************** Nodes section ***************************\n\n      // Update the nodes...\n      var node = svg.selectAll('g.node').data(nodes, function (d) {\n        return d.id || (d.id = ++i);\n      });\n\n      // Enter any new modes at the parent's previous position.\n      var nodeEnter = node.enter().append('g').attr('class', 'node').attr(\"transform\", function (d) {\n        return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n      }).on('click', click);\n\n      // Add Circle for the nodes\n      nodeEnter.append('circle').attr('class', 'node').attr('r', 1e-6).style(\"fill\", function (d) {\n        return d._children ? \"lightsteelblue\" : \"#fff\";\n      });\n\n      // Add labels for the nodes\n      nodeEnter.append('text').attr(\"dy\", \".35em\").attr(\"x\", function (d) {\n        return d.children || d._children ? -13 : 13;\n      }).attr(\"text-anchor\", function (d) {\n        return d.children || d._children ? \"end\" : \"start\";\n      }).text(function (d) {\n        return d.data.name;\n      });\n\n      // UPDATE\n      var nodeUpdate = nodeEnter.merge(node);\n\n      // Transition to the proper position for the node\n      nodeUpdate.transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + d.y + \",\" + d.x + \")\";\n      });\n\n      // Update the node attributes and style\n      nodeUpdate.select('circle.node').attr('r', 10).style(\"fill\", function (d) {\n        return d._children ? \"lightsteelblue\" : \"#fff\";\n      }).attr('cursor', 'pointer');\n\n      // Remove any exiting nodes\n      var nodeExit = node.exit().transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + source.y + \",\" + source.x + \")\";\n      }).remove();\n\n      // On exit reduce the node circles size to 0\n      nodeExit.select('circle').attr('r', 1e-6);\n\n      // On exit reduce the opacity of text labels\n      nodeExit.select('text').style('fill-opacity', 1e-6);\n\n      // ****************** links section ***************************\n\n      // Update the links...\n      var link = svg.selectAll('path.link').data(links, function (d) {\n        return d.id;\n      });\n\n      // Enter any new links at the parent's previous position.\n      var linkEnter = link.enter().insert('path', \"g\").attr(\"class\", \"link\").attr('d', function (d) {\n        var o = {\n          x: source.x0,\n          y: source.y0\n        };\n        return diagonal(o, o);\n      });\n\n      // UPDATE\n      var linkUpdate = linkEnter.merge(link);\n\n      // Transition back to the parent element position\n      linkUpdate.transition().duration(duration).attr('d', function (d) {\n        return diagonal(d, d.parent);\n      });\n\n      // Remove any exiting links\n      var linkExit = link.exit().transition().duration(duration).attr('d', function (d) {\n        var o = {\n          x: source.x,\n          y: source.y\n        };\n        return diagonal(o, o);\n      }).remove();\n\n      // Store the old positions for transition.\n      nodes.forEach(function (d) {\n        d.x0 = d.x;\n        d.y0 = d.y;\n      });\n\n      // Toggle children on click.\n      function click(d) {\n        if (d.children) {\n          d._children = d.children;\n          d.children = null;\n        } else {\n          d.children = d._children;\n          d._children = null;\n        }\n        update(d);\n        centerNode(d);\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 11\n    }\n  }, filenameFromParams), /*#__PURE__*/React.createElement(\"svg\", {\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 11\n    }\n  }));\n}\nexport default TreeVisualisation;","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","useParams","TreeVisualisation","_useParams","filenameFromParams","filename","ref","drawTree","centerNode","source","scale","x","y0","width","y","x0","height","svg","transition","duration","call","dr","zoom","transform","zoomIdentity","translate","i","root","select","current","selectAll","remove","margin","top","right","bottom","left","attr","concat","append","treemap","tree","size","json","then","treeData","hierarchy","d","children","forEach","collapse","update","catch","error","console","_children","treePadding","xMax","max","descendants","xMin","min","yMax","nodes","links","slice","depth","node","data","id","nodeEnter","enter","on","click","style","_children_length","length","text","name","nodeUpdate","merge","nodeExit","exit","link","linkEnter","insert","o","diagonal","linkUpdate","parent","linkExit","bounds","getBBox","Infinity","x1","Math","s","path","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TreeVisualisation.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { useParams } from 'react-router-dom';\nimport '../styles/TreeDiagram.css';\n\nfunction TreeVisualisation() {\n\n\n    const { filename: filenameFromParams } = useParams();\n    // const [filenameFromParams, setFilenameFromParams] = useState('Default File Name');\n    const ref = useRef(null);\n\n   \n\n  useEffect(() => {\n    drawTree(filenameFromParams);\n  }, [filenameFromParams]);\n\n\n  const centerNode = (source) => {\n    let scale = 0.8;\n    let x = -source.y0 * scale + width / 2;\n    let y = -source*x0 * scale + height / 2;\n     \n    svg.transition()\n    .duration(duration)\n    .call(\n        dr.zoom().transform,\n        d3.zoomIdentity.translate(x, y).scale(scale)\n\n    );\n}\n\n  const drawTree = (filename) => {\n    let i = 0;\n    const duration = 750;\n    let root;\n    \n    d3.select(ref.current).selectAll(\"*\").remove();\n\n    var margin = {top: 20, right: 90, bottom: 30, left: 90},\n        width = 2000 - margin.left - margin.right,\n        height = 1000 - margin.top - margin.bottom;\n\n    var svg = d3.select(ref.current)\n        .attr(\"width\", \"100%\")\n        .attr(\"height\", \"100%\")\n        .attr(\"viewBox\", `0 0 ${width + margin.right + margin.left} ${height + margin.top + margin.bottom}`)\n        .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    var treemap = d3.tree().size([height, width]);\n\n    d3.json(`http://localhost:3000/processed_data/${filename}`)\n    .then((treeData) => { \n      root = d3.hierarchy(treeData, function(d) { return d.children; });\n      root.x0 = height / 2;\n    //   root.y0 = width / 2;\n      root.y0 = 0;\n      // Collapse after the second level\n      root.children.forEach(collapse);\n\n      update(root);\n    })\n    .catch(error => {\n      console.error(\"Error occurred while fetching and processing data: \", error);\n    });\n\n    function collapse(d) {\n      if(d && d.children) {\n          d._children = d.children;\n          d._children.forEach(collapse);\n          d.children = null;\n      }\n    }\n\n    function update(source) {\n\n            // Assigns the x and y position for the nodes\n        var treeData = treemap(root);\n\n        // adjust these values based on how much padding you want around the tree\n        var treePadding = 100;\n\n        // find the maximum and minimum x and y values\n        var xMax = d3.max(treeData.descendants(), function(d) { return d.x; });\n        var xMin = d3.min(treeData.descendants(), function(d) { return d.x; });\n        var yMax = d3.max(treeData.descendants(), function(d) { return d.y; });\n\n        // Compute the new tree layout.\n        var nodes = treeData.descendants(),\n            links = treeData.descendants().slice(1);\n\n        // Normalize for fixed-depth.\n        nodes.forEach(function(d){ d.y = d.depth * 1200});\n\n    \n\n        // ****************** Nodes section ***************************\n\n  // Update the nodes...\n  var node = svg.selectAll('g.node')\n  .data(nodes, function(d) {return d.id || (d.id = ++i); });\n\n// Enter any new modes at the parent's previous position.\nvar nodeEnter = node.enter().append('g')\n  .attr('class', 'node')\n  .attr(\"transform\", function(d) {\n    return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n})\n.on('click', click);\n\n// Add Circle for the nodes\nnodeEnter.append('circle')\n  .attr('class', 'node')\n  .attr('r', 1e-6)\n  .style(\"fill\", function(d) {\n      return d._children && d._children_length > 0 ? \"lightsteelblue\" : \"#fff\";\n  })\n  .on(\"click\", (d) => click (d));\n\n// Add labels for the nodes\nnodeEnter.append('text')\n  .attr(\"dy\", \".85em\")\n  .attr(\"x\", function(d) {\n    return (d.children && d.children.length > 0) || (d._children && d._children.length > 0) ? -13 : 13;\n  })\n  .attr(\"text-anchor\", function(d) {\n      return d.children || d._children ? \"end\" : \"start\";\n  })\n  .text(function(d) { return d.data.name; })\n  .on(\"click\", (d) => click(d));\n\n// UPDATE\nvar nodeUpdate = nodeEnter.merge(node);\n\n// Transition to the proper position for the node\nnodeUpdate.transition()\n.duration(duration)\n.attr(\"transform\", function(d) { \n    return \"translate(\" + d.y + \",\" + d.x + \")\";\n });\n\n// Update the node attributes and style\nnodeUpdate.select('circle.node')\n.attr('r', 15)\n.style(\"fill\", function(d) {\n    return (d._children && d._children.length > 0) ? \"lightsteelblue\" : \"#fff\";\n})\n.attr('cursor', 'pointer');\n\n\nnodeUpdate.select('circle.node')\n.attr('r', 15)\n.style(\"fill\", function(d) {\n// change the fill color depending on whether the node has children or not\nif (d._children) {  // collapsed nodes\n  return \"lightsteelblue\"; \n} else if (d.children) {  // expanded nodes\n  return \"green\";  // change this to whatever color you want for expanded nodes\n} else {  // leaf nodes\n  return \"#fff\";\n}\n})\n.attr('cursor', 'pointer');\n\n\n// Remove any exiting nodes\nvar nodeExit = node.exit().transition()\n  .duration(duration)\n  .attr(\"transform\", function(d) {\n      return \"translate(\" + source.y + \",\" + source.x + \")\";\n  })\n  .remove();\n\n// On exit reduce the node circles size to 0\nnodeExit.select('circle')\n.attr('r', 1e-5);\n\n// On exit reduce the opacity of text labels\nnodeExit.select('text')\n.style('fill-opacity', 1e-5);\n\n// ****************** links section ***************************\n\n// Update the links...\nvar link = svg.selectAll('path.link')\n  .data(links, function(d) { return d.id; });\n\n// Enter any new links at the parent's previous position.\nvar linkEnter = link.enter().insert('path', \"g\")\n  .attr(\"class\", \"link\")\n  .attr('d', function(d){\n    var o = {x: source.x0, y: source.y0}\n    return diagonal(o, o)\n  });\n\n// UPDATE\nvar linkUpdate = linkEnter.merge(link);\n\n// Transition back to the parent element position\nlinkUpdate.transition()\n  .duration(duration)\n  .attr('d', function(d){ return diagonal(d, d.parent) });\n\n// Remove any exiting links\nvar linkExit = link.exit().transition()\n  .duration(duration)\n  .attr('d', function(d) {\n    var o = {x: source.x, y: source.y}\n    return diagonal(o, o)\n  })\n  .remove();\n\n// Store the old positions for transition.\nnodes.forEach(function(d){\nd.x0 = d.x;\nd.y0 = d.y;\n});\n\n// Get the bounds of the tree\nvar bounds = svg.node().getBBox();\nvar x0 = Infinity;\nvar x1 = -x0;\nnodes.forEach(function(d) {\nif (d.x > x1) x1 = d.x;\nif (d.x < x0) x0 = d.x;\n});\n\n// Calculate the scale to fit the tree into view\nvar scale = Math.min(width / bounds.width, height / bounds.height);\n\n\n\n// Adjust the height of the svg to fit the tree\nheight = x1 - x0 + margin.top + margin.bottom;\n\nsvg.attr(\"height\", height);\n\n// Creates a curved (diagonal) path from parent to the child nodes\nfunction diagonal(s, d) {\n\nlet path = `M ${s.y} ${s.x}\nC ${(s.y + d.y) / 2} ${s.x},\n    ${(s.y + d.y) / 2} ${d.x},\n    ${d.y} ${d.x}`;\n\n\nreturn path\n}\n    \n      // Here you'd insert the bulk of the code you provided before - specifically everything that's supposed to go inside the update function.\n      // You'll need to replace every instance of `treeData` with `root`, and `svg` with `svgGroup`\n\n      // Assigns the x and y position for the nodes\n      var treeData = treemap(root);\n\n      // Compute the new tree layout.\n      var nodes = treeData.descendants(),\n          links = treeData.descendants().slice(1);\n\n      // Normalize for fixed-depth.\n      nodes.forEach(function(d){ d.y = d.depth * 180});\n\n      // ****************** Nodes section ***************************\n\n      // Update the nodes...\n      var node = svg.selectAll('g.node')\n          .data(nodes, function(d) {return d.id || (d.id = ++i); });\n\n      // Enter any new modes at the parent's previous position.\n      var nodeEnter = node.enter().append('g')\n          .attr('class', 'node')\n          .attr(\"transform\", function(d) {\n            return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n        })\n        .on('click', click);\n\n      // Add Circle for the nodes\n      nodeEnter.append('circle')\n          .attr('class', 'node')\n          .attr('r', 1e-6)\n          .style(\"fill\", function(d) {\n              return d._children ? \"lightsteelblue\" : \"#fff\";\n          });\n\n      // Add labels for the nodes\n      nodeEnter.append('text')\n          .attr(\"dy\", \".35em\")\n          .attr(\"x\", function(d) {\n              return d.children || d._children ? -13 : 13;\n          })\n          .attr(\"text-anchor\", function(d) {\n              return d.children || d._children ? \"end\" : \"start\";\n          })\n          .text(function(d) { return d.data.name; });\n\n      // UPDATE\n      var nodeUpdate = nodeEnter.merge(node);\n\n      // Transition to the proper position for the node\n      nodeUpdate.transition()\n        .duration(duration)\n        .attr(\"transform\", function(d) { \n            return \"translate(\" + d.y + \",\" + d.x + \")\";\n         });\n\n      // Update the node attributes and style\n      nodeUpdate.select('circle.node')\n        .attr('r', 10)\n        .style(\"fill\", function(d) {\n            return d._children ? \"lightsteelblue\" : \"#fff\";\n        })\n        .attr('cursor', 'pointer');\n\n\n      // Remove any exiting nodes\n      var nodeExit = node.exit().transition()\n          .duration(duration)\n          .attr(\"transform\", function(d) {\n              return \"translate(\" + source.y + \",\" + source.x + \")\";\n          })\n          .remove();\n\n      // On exit reduce the node circles size to 0\n      nodeExit.select('circle')\n        .attr('r', 1e-6);\n\n      // On exit reduce the opacity of text labels\n      nodeExit.select('text')\n        .style('fill-opacity', 1e-6);\n\n      // ****************** links section ***************************\n\n      // Update the links...\n      var link = svg.selectAll('path.link')\n          .data(links, function(d) { return d.id; });\n\n      // Enter any new links at the parent's previous position.\n      var linkEnter = link.enter().insert('path', \"g\")\n          .attr(\"class\", \"link\")\n          .attr('d', function(d){\n            var o = {x: source.x0, y: source.y0}\n            return diagonal(o, o)\n          });\n\n      // UPDATE\n      var linkUpdate = linkEnter.merge(link);\n\n      // Transition back to the parent element position\n      linkUpdate.transition()\n          .duration(duration)\n          .attr('d', function(d){ return diagonal(d, d.parent) });\n\n      // Remove any exiting links\n      var linkExit = link.exit().transition()\n          .duration(duration)\n          .attr('d', function(d) {\n            var o = {x: source.x, y: source.y}\n            return diagonal(o, o)\n          })\n          .remove();\n\n      // Store the old positions for transition.\n      nodes.forEach(function(d){\n        d.x0 = d.x;\n        d.y0 = d.y;\n      });\n\n      // Toggle children on click.\n      function click(d) {\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n        } else {\n            d.children = d._children;\n            d._children = null;\n        }\n        update(d);\n        centerNode(d);\n      }\n\n    }\n  }\n\n  return (\n      <div>\n          <h1>{filenameFromParams}</h1>\n          <svg ref={ref}></svg>\n      </div>\n  );\n  \n}\n\nexport default TreeVisualisation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}