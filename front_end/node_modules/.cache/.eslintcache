[{"/Users/stan/Desktop/esg_demo_system/front_end/src/index.js":"1","/Users/stan/Desktop/esg_demo_system/front_end/src/reportWebVitals.js":"2","/Users/stan/Desktop/esg_demo_system/front_end/src/App.js":"3","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/Contact.js":"4","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SentimentAnalysis.js":"5","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TopicsVis.js":"6","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/About.js":"7","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/Home.js":"8","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/WordFrequency.js":"9","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SentimentVis.js":"10","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TreeVisualisation.js":"11","/Users/stan/Desktop/esg_demo_system/front_end/src/components/Navbar.js":"12","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SearchPage.js":"13","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/Topics.js":"14","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/ReportStructure.js":"15","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/WordCloud.js":"16","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/CustomDropdown.js":"17"},{"size":586,"mtime":1686613035827,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1686613035828,"results":"20","hashOfConfig":"19"},{"size":1809,"mtime":1686994565697,"results":"21","hashOfConfig":"19"},{"size":175,"mtime":1686613035827,"results":"22","hashOfConfig":"19"},{"size":992,"mtime":1686994634028,"results":"23","hashOfConfig":"19"},{"size":476,"mtime":1687627533380,"results":"24","hashOfConfig":"19"},{"size":171,"mtime":1686613035827,"results":"25","hashOfConfig":"19"},{"size":162,"mtime":1687168430752,"results":"26","hashOfConfig":"19"},{"size":2143,"mtime":1688629490197,"results":"27","hashOfConfig":"19"},{"size":6580,"mtime":1688516348917,"results":"28","hashOfConfig":"19"},{"size":7612,"mtime":1687524283228,"results":"29","hashOfConfig":"19"},{"size":1873,"mtime":1686613035827,"results":"30","hashOfConfig":"19"},{"size":7512,"mtime":1687627141789,"results":"31","hashOfConfig":"19"},{"size":2099,"mtime":1687189996825,"results":"32","hashOfConfig":"19"},{"size":1290,"mtime":1686662125945,"results":"33","hashOfConfig":"19"},{"size":4398,"mtime":1688619924774,"results":"34","hashOfConfig":"19"},{"size":1366,"mtime":1687400085627,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"9pr7aj",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/stan/Desktop/esg_demo_system/front_end/src/index.js",[],["75","76"],"/Users/stan/Desktop/esg_demo_system/front_end/src/reportWebVitals.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/App.js",["77"],"import React from 'react';\nimport SearchPage from './pages/SearchPage';  \nimport { BrowserRouter as Router, Route, Link, Routes } from 'react-router-dom';\nimport Home from './pages/Home';\nimport About from './pages/About';\nimport Contact from './pages/Contact';\nimport Navbar from './components/Navbar';\nimport ReportStructure from './pages/ReportStructure';\nimport TreeVisualisation from './pages/TreeVisualisation';\nimport WordFrequency from './pages/WordFrequency';\nimport SentimentAnalysis from './pages/SentimentAnalysis';\nimport SentimentVis from './pages/SentimentVis';\nimport Topics from './pages/Topics';\nimport TopicsVis from './pages/TopicsVis';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar></Navbar>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/about\" element={<About />} />\n          <Route path=\"/contact\" element={<Contact />} />\n          <Route path=\"/companies\" element={<SearchPage />} /> \n          <Route path=\"/visualisations/report_structure\" element={<ReportStructure />} />\n          <Route path=\"/visualisations/report_structure/tree/:filename\" element={<TreeVisualisation />} /> \n          <Route path=\"/visualisations/word_frequency\" element={<WordFrequency />} />\n          <Route path=\"/visualisations/word_frequency/:filename\" element={<WordFrequency />} />\n          <Route path=\"/visualisations/sentiment_analysis\" element={<SentimentAnalysis />} />\n          <Route path=\"/visualisations/sentiment_analysis/:filename\" element={<SentimentVis />} />\n          <Route path=\"/visualisations/topics\" element={<Topics />} />\n          <Route path=\"/visualisations/topics/:fileName\" element={<TopicsVis/>} />\n\n          \n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n\n\n","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/Contact.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SentimentAnalysis.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TopicsVis.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/About.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/Home.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/WordFrequency.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SentimentVis.js",["78","79","80"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Brush, Label } from 'recharts';\nimport Modal from 'react-modal';\nimport '../styles/sentiment.css';\n\nfunction SentimentVis() {\n    const { filename } = useParams(); // Get filename from URL parameters\n    const [sentimentData, setSentimentData] = useState(null);\n    const [selectedSentiments, setSelectedSentiments] = useState(['compound']); // Initialize with compound sentiment only\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [modalText, setModalText] = useState(\"\");\n    const [hoveredIndex, setHoveredIndex] = useState(null);\n\n    const sentimentColors = {\n        'compound': '#FF8133',\n        'pos': '#2E933C',\n        'neu': '#51B9F6',\n        'neg': '#FF5F5C'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await fetch(`http://localhost:3000/sentiment-data/${filename}`);\n            const data = await response.json();\n\n            const transformedData = data.neg.map((value, index) => {\n                return {\n                    index: index,\n                    neg: data.neg[index],\n                    neu: data.neu[index],\n                    pos: data.pos[index],\n                    compound: data.compound[index],\n                    text: data.text[index] // Include the text field here\n                }\n            });\n\n            setSentimentData(transformedData);\n        }\n        fetchData();\n    }, [filename]); \n\n    const CustomTooltip = ({ active, payload, label }) => {\n        if (active && payload && payload.length) {\n            const textChunk = sentimentData[label].text || ''; // assuming the text chunk is stored under 'text' key\n            const snippet = textChunk.length > 100 ? textChunk.substring(0, 100) + '...' : textChunk;\n\n            setHoveredIndex(label);\n            \n            return (\n                <div className=\"custom-tooltip\" style={{ backgroundColor: '#f4f4f4', padding: '5px', border: '1px solid #d4d4d4' }}>\n                    {payload.map((pl, index) => \n                        <p key={index}>{`${pl.dataKey} score: ${pl.value}`}</p>\n                    )}\n                    {/* Display the snippet */}\n                    {/* <p>Corresponding text: {snippet}</p> */}\n                </div>\n            );\n        }\n        return null;\n    };\n\n    const handleReadMoreClick = (index) => {\n        const textChunk = sentimentData[index].text || '';\n        setModalText(textChunk);\n        setIsModalOpen(true);\n    };\n\n    const handleCheckboxChange = (event) => {\n        if (selectedSentiments.includes(event.target.value)) {\n            setSelectedSentiments(selectedSentiments.filter(sentiment => sentiment !== event.target.value));\n        } else {\n            setSelectedSentiments([...selectedSentiments, event.target.value]);\n        }\n    }\n\n    return (\n        <div>\n            {sentimentData ? (\n                <div>\n                    <h1>Sentiment scores over the course of a report for {filename}</h1>\n                    <div style={{ display: 'flex', alignItems: 'flex-start' }}>\n                        <div style={{ flex: 1 }}>\n                            <div>\n                                {Object.keys(sentimentColors).map(sentiment => (\n                                    <div key={sentiment}>\n                                        <input \n                                            type=\"checkbox\"\n                                            id={sentiment}\n                                            value={sentiment}\n                                            checked={selectedSentiments.includes(sentiment)}\n                                            onChange={handleCheckboxChange}\n                                        />\n                                        <label htmlFor={sentiment}>{sentiment.charAt(0).toUpperCase() + sentiment.slice(1)}</label>\n                                    </div>\n                                ))}\n                            </div>\n                            <Modal\n                                    isOpen={isModalOpen}\n                                    onRequestClose={() => setIsModalOpen(false)}\n                                    contentLabel=\"Text Modal\"\n                                >\n                                    <button onClick={() => setIsModalOpen(false)}>Close</button>\n                                    <p>{modalText}</p>\n                            </Modal>\n                            <LineChart\n                                className='myChart'\n                                width={1000}\n                                height={500}\n                                data={sentimentData}\n                                animationDuration={300} \n                                animationEasing=\"ease-out\"\n                                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                            >\n                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                <XAxis dataKey=\"index\"/>\n                                <YAxis />\n                                <Tooltip content={<CustomTooltip />} />\n                                <Legend verticalAlign=\"top\" wrapperStyle={{ lineHeight: '40px' }} />\n                                {selectedSentiments.map(sentiment => \n                                    <Line key={sentiment} type=\"monotone\" dataKey={sentiment} stroke={sentimentColors[sentiment]} strokeWidth={3} />\n                                )}\n                                <Brush />\n                            </LineChart>\n                        </div>\n                        {/* Styling for the card that will contain the full text */}\n                        <div style={{ flex: 1, marginLeft: '20px', padding: '15px', border: '1px solid #ccc', borderRadius: '8px', boxShadow: '2px 2px 8px rgba(0,0,0,0.1)' }}>\n                            {hoveredIndex !== null && (\n                                <div>\n                                    <h2>Full Text for Index {hoveredIndex}</h2>\n                                    <p>{sentimentData[hoveredIndex].text}</p>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            ) : (\n                <p>Loading sentiment data...</p>\n            )}\n        </div>\n    );\n    \n    \n\n}\n\nexport default SentimentVis;\n","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TreeVisualisation.js",["81","82"],"import React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { useParams } from 'react-router-dom';\nimport '../styles/TreeDiagram.css';\n\nfunction TreeVisualisation() {\n  const { filename: filenameFromParams } = useParams();\n  const ref = useRef(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n      console.log(\"Filename from params: \", filenameFromParams);\n      drawTree(filenameFromParams);\n  }, [filenameFromParams]);\n\n  const drawTree = (filename) => {\n      let i = 0;\n      let duration = 800;\n      let root;\n\n  const svgContainer = d3.select(ref.current)\n\n  svgContainer.selectAll(\"*\").remove();\n  \n  const zoom = d3.zoom()\n      .scaleExtent([0.5, 10])\n      .on(\"zoom\", function (event){\n          svg.attr(\"transform\", event.transform)\n      });\n\n  const svg = svgContainer.append(\"svg\")\n      .attr(\"width\", \"100%\")\n      .attr(\"height\", \"100%\")\n      .attr(\"viewBox\", \"-100 -20 2000 1000\")\n      .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n      .call(zoom)\n      .append(\"g\");\n\n      const treemap = d3.tree().size([900, 800])\n      .separation(function(a, b) {\n          return (a.parent == b.parent ? 1 : 2) / a.depth;\n      });\n\n      function centerTree() {\n          const nodesExtent = d3.extent(svg.selectAll('.node').nodes(), function(d) {\n              const bbox = d.getBBox();\n              const matrix = d.getCTM();\n              return matrix ? [matrix.e + bbox.x, matrix.e + bbox.x + bbox.width]: [0,0];\n          });\n      \n          const xOffset = (nodesExtent[0] + nodesExtent[1]) / -2;\n          const scale = 0.8; // You can adjust the scale as needed\n          svgContainer.transition()\n              .duration(duration)\n              .call(zoom.transform, d3.zoomIdentity.translate(xOffset, 0).scale(scale));\n      }\n\n  d3.json(`http://localhost:3000/processed_data/${filename}`)\n    .then((treeData) => { \n      console.log(\"Received tree data: \", treeData);\n      root = d3.hierarchy(treeData, function(d) { return d.children; });\n      root.x0 = window.innerHeight / 2;\n      root.y0 = window.innerWidth / 10;\n      root.children.forEach(collapse);\n      update(root);\n      centerTree();\n      setLoading(false);\n    })\n    .catch(error => {\n      console.error(\"Error occurred while fetching and processing data: \", error);\n      setLoading(false);\n    });\n\n    const collapse = (d) => {\n      if(d.children) {\n        d._children = d.children;\n        d._children.forEach(collapse);\n        d.children = null;\n      }\n    }\n\n    const update = (source) => {\n      const treeData = treemap(root);\n      const nodes = treeData.descendants();\n      const links = treeData.descendants().slice(1);\n      nodes.forEach(function(d){ d.y = d.depth * 1250});\n      const node = svg.selectAll('g.node')\n          .data(nodes, function(d) {return d.id || (d.id = ++i); });\n\n      const nodeEnter = node.enter().append('g')\n          .attr('class', 'node')\n          .attr(\"transform\", function(d) {\n            return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n        })\n        .on('click', (event, d) => click(d));\n\n      nodeEnter.append('circle')\n          .attr('class', 'node')\n          .attr('r', 1e-4)\n          .style(\"fill\", function(d) {\n              return d._children ? \"lightsteelblue\" : \"#fff\";\n          });\n\n      nodeEnter.append('text')\n      .attr(\"dy\", \" -1em\") // Shifts the text vertically so it's centered on the node\n      .attr(\"x\", 0) // Centers the text horizontally on the node\n      .style(\"text-anchor\", \"middle\") // Ensures the text is centered at its position\n      .text(function(d) { return d.data.name; });\n      const nodeUpdate = nodeEnter.merge(node);\n\n      nodeUpdate.transition()\n        .duration(duration)\n        .attr(\"transform\", function(d) { \n            return \"translate(\" + d.y + \",\" + d.x + \")\";\n         });\n\n      nodeUpdate.select('circle.node')\n        .attr('r', 15)\n        .style(\"fill\", function(d) {\n            if (d._children) {\n              return \"lightsteelblue\";\n            } else if (d.children) {\n              return \"green\";\n            } else {\n              return \"#fff\";\n            }\n        })\n        .attr('cursor', 'pointer');\n\n      const nodeExit = node.exit().transition()\n          .duration(duration)\n          .attr(\"transform\", function(d) {\n              return \"translate(\" + source.y + \",\" + source.x + \")\";\n          })\n          .remove();\n\n      nodeExit.select('circle')\n        .attr('r', 1e-5);\n\n      nodeExit.select('text')\n        .style('fill-opacity', 1e-5);\n\n      const link = svg.selectAll('path.link')\n          .data(links, function(d) { return d.id; });\n\n      const linkEnter = link.enter().insert('path', \"g\")\n          .attr(\"class\", \"link\")\n          .attr('d', function(d){\n            var o = {x: source.x0, y: source.y0}\n            return diagonal(o, o)\n          });\n\n      const linkUpdate = linkEnter.merge(link);\n\n      linkUpdate.transition()\n          .duration(duration)\n          .attr('d', function(d){ return diagonal(d, d.parent) });\n\n      const linkExit = link.exit().transition()\n          .duration(duration)\n          .attr('d', function(d) {\n            var o = {x: source.x, y: source.y}\n            return diagonal(o, o)\n          })\n          .remove();\n\n      nodes.forEach(function(d){\n        d.x0 = d.x;\n        d.y0 = d.y;\n      });\n\n      function click(d) {\n          let nodeToFocus;\n          \n          // If the clicked node is the root\n          if (d.depth === 0) {\n            if (d.children) { // If the root node has children\n              collapseAll(d); // Collapse all children\n            } else if (d._children) { // If the root node has collapsed children\n              d.children = d._children; // Expand the root node\n              d._children = null;\n            }\n            nodeToFocus = d; // Set the root node as the node to focus\n          } else {\n            if (d.children) {\n              d._children = d.children;\n              d.children = null;\n              nodeToFocus = d.parent;\n            } else {\n              d.children = d._children;\n              d._children = null;\n              nodeToFocus = d;\n            }\n          }\n        \n          update(nodeToFocus); // Update with the node to focus\n          centerNode(nodeToFocus); // Center the node to focus\n        }\n        \n        // This function will recursively collapse all children of a node\n        function collapseAll(node) {\n          if (node.children) {\n            node.children.forEach(collapseAll); // Call this function for each child\n            node._children = node.children; \n            node.children = null; \n          }\n        }\n        \n      function centerNode(source){\n              let scale = 0.8;\n              let x = -source.y * scale + 300; // 750 is half of 1500 (the size defined for the tree layout)\n              let y = -source.x * scale + 300;\n              svgContainer.transition()\n                  .duration(duration)\n                  .ease(d3.easeCubic)\n                  .call(zoom.transform, d3.zoomIdentity.translate(x, y).scale(scale));\n      }\n      \n      function diagonal(s, d) {\n\n        const path = `M ${s.y} ${s.x}\n              C ${(s.y + d.y) / 2} ${s.x},\n                ${(s.y + d.y) / 2} ${d.x},\n                ${d.y} ${d.x}`\n\n        return path\n      }\n    }\n  }\n\n  return (\n    <div className=\"visualisation\">\n      {loading ?\n      <div>Loading...</div> : null}\n      <div className={`svg-container ${loading ? 'hidden' : ''}`} ref={ref}></div>\n    </div>\n  );\n}\n\nexport default TreeVisualisation;","/Users/stan/Desktop/esg_demo_system/front_end/src/components/Navbar.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SearchPage.js",["83"],"import React, { useState, useEffect } from 'react';\nimport { Card, Button, Alert, Accordion, Form } from 'react-bootstrap';\nimport { FaTimesCircle } from \"react-icons/fa\";\nimport { GiCancel } from \"react-icons/gi\";\nimport '../styles/search.css';\n\nfunction SearchPage() {\n  const [companies, setCompanies] = useState([]);\n  const [query, setQuery] = useState('');\n  const [isHovering, setIsHovering] = useState(false);\n  const [noResults, setNoResults] = useState(false);\n  const [selectedSectors, setSelectedSectors] = useState([]);\n  const [selectedExchanges, setSelectedExchanges] = useState([]);\n\n\n  useEffect(() => {\n    search();\n    }, [selectedSectors, selectedExchanges]);\n\n    function search() {\n      const sectors = selectedSectors.join(\",\");\n      const exchanges = selectedExchanges.join(\",\");\n      // Don't make a request if no sectors and no exchanges are selected\n      if (!sectors && !exchanges && !query) {\n          return;\n      }\n      return fetch(`http://localhost:3000/search?query=${query}&sectors=${sectors}&exchanges=${exchanges}`)\n          .then(response => response.json())\n          .then(companies => {\n              if (companies.length === 0) {\n                  setNoResults(true);\n              } else {\n                  setNoResults(false);\n              }\n              setCompanies(companies);\n          });\n  }\n  \n  // Handle the form submission\nfunction handleFormSubmit(e) {\n  e.preventDefault();\n  search();\n}\n\n  function handleSectorChange(e) {\n    const value = e.target.value;\n    setSelectedSectors(prevState => {\n        if (prevState.includes(value)) {\n            return prevState.filter(sector => sector !== value);\n        } else {\n            return [...prevState, value];\n        }\n    });\n}\n\nfunction handleExchangeChange(e) {\n        const value = e.target.value;\n        setSelectedExchanges(prevState => {\n            if (prevState.includes(value)) {\n                return prevState.filter(exchange => exchange !== value);\n            } else {\n                return [...prevState, value];\n            }\n        });\n    }\n\n  function handleClear() {\n    setQuery('');\n    setCompanies([]);\n    setNoResults(false);\n  }\n\n  return (\n    <div className='m-4'>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"filter-section\" style={{ display: 'flex', flexDirection: 'center', gap: '10px' }}>\n          <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\n            <div style={{ position: 'relative', marginRight: '10px', flex: 1 }}>\n              <input \n                name=\"search\" \n                type=\"text\" \n                placeholder=\"Search for companies...\" \n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n                style={{ width: '100%', paddingRight: '30px', borderRadius: '4px' }}\n              />\n              <FaTimesCircle \n                style={{ cursor: 'pointer', position: 'absolute', top: '50%', right: '5px', transform: 'translateY(-50%)', color: isHovering ? 'black' : 'grey' }}\n                onMouseEnter={() => setIsHovering(true)}\n                onMouseLeave={() => setIsHovering(false)}\n                onClick={handleClear}\n              />\n            </div>\n            <button \n              type=\"submit\" \n              style={{ backgroundColor: '#4C8BF5', color: 'white', border: 'none', padding: '5px 20px', borderRadius: '4px', cursor: 'pointer' }}\n              onMouseEnter={(e) => e.target.style.backgroundColor = '#3C7CE5'}\n              onMouseLeave={(e) => e.target.style.backgroundColor = '#4C8BF5'}\n            >Search\n            </button>\n          </div>\n        </div>\n      </form>\n      {/* Filters Section */}\n      <Accordion defaultActiveKey=\"\" className=\"mt-3\">\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>Filters</Accordion.Header>\n                    <Accordion.Body>\n                        <Form.Group controlId=\"sectors\">\n                          <span className='filter-label'>Sectors</span>\n                          <div className=\"filter-options\">\n                            {[\"Technology\", \"Healthcare\", \"Services\", \"Financial\", \"Utilities\", \"Consumer Goods\", \"Real Estate\", \"Energy\"].map(sector => (\n                            <div className='filter-option' key={sector}>\n                               <Form.Check\n                                    type=\"checkbox\"\n                                    label={sector}\n                                    value={sector}\n                                    onChange={handleSectorChange}\n                                />\n                              </div>\n                            ))}\n                          </div>\n                        </Form.Group>\n                        <Form.Group controlId=\"exchanges\">\n                          <span className='filter-label'>Exchanges</span>\n                          <div className=\"filter-options\">\n                            {/* <Form.Label>Exchanges</Form.Label> */}\n                            {[\"NYSE\", \"NASDAQ\", \"OTC\", \"TSX-V\", \"ASX\", \"LSE\", \"AMEX\", \"TSX\"].map(exchange => (\n                              <div className='filter-option' key={exchange}>\n                                <Form.Check\n                                    type=\"checkbox\"\n                                    label={exchange}\n                                    value={exchange}\n                                    onChange={handleExchangeChange}\n                                />\n                                </div>\n                            ))}\n                            </div>\n                        </Form.Group>\n                    </Accordion.Body>\n                </Accordion.Item>\n            </Accordion>\n\n      {noResults && \n        <Alert variant=\"danger\" className=\"margin-top\">\n          <GiCancel /> No companies found related to \"{query}\". Please try again with a different query.\n        </Alert>}\n\n      {/* Render the company data. */}\n      {companies.map(company => (\n        <Card key={company.id} className='mt-4'>\n          <Card.Body>\n            <Card.Title>{company.company_name} ({company.ticker})</Card.Title>\n            <Card.Text>{company.company_introduction}</Card.Text>\n            <p><strong>Sector:</strong> {company.sector}</p>\n            <p><strong>Industry:</strong> {company.industry}</p>\n            <p><strong>Exchange:</strong> {company.exchange}</p>\n            <p><strong>Location:</strong> {company.company_location}</p>\n\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\"></link>\n            <p><strong>All ESG reports:</strong>\n              <a href={company.source_url} target=\"_blank\" rel=\"noopener noreferrer\" class=\"esg-link\" title=\"Click to view all ESG reports\">\n                  <i class=\"fas fa-external-link-alt\"></i> View Reports\n              </a>\n          </p>\n          <p><strong>Most recent ESG report:</strong>\n              <a href={company.url} target=\"_blank\" rel=\"noopener noreferrer\" class=\"esg-link\" title=\"Click to view the most recent ESG report\">\n                  <i class=\"fas fa-file-alt\"></i> View Recent Report\n              </a>\n          </p>\n            {company.company_website && (\n              <Button variant=\"primary\" href={company.company_website} target=\"_blank\">Visit company website</Button>\n            )}\n          </Card.Body>\n        </Card>\n      ))}\n    </div>\n  );\n}\n\nexport default SearchPage;","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/Topics.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/ReportStructure.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/WordCloud.js",["84"],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/CustomDropdown.js",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":3,"column":42,"nodeType":"91","messageId":"92","endLine":3,"endColumn":46},{"ruleId":"89","severity":1,"message":"93","line":3,"column":80,"nodeType":"91","messageId":"92","endLine":3,"endColumn":85},{"ruleId":"89","severity":1,"message":"94","line":46,"column":19,"nodeType":"91","messageId":"92","endLine":46,"endColumn":26},{"ruleId":"89","severity":1,"message":"95","line":63,"column":11,"nodeType":"91","messageId":"92","endLine":63,"endColumn":30},{"ruleId":"96","severity":1,"message":"97","line":41,"column":28,"nodeType":"98","messageId":"99","endLine":41,"endColumn":30},{"ruleId":"89","severity":1,"message":"100","line":159,"column":13,"nodeType":"91","messageId":"92","endLine":159,"endColumn":21},{"ruleId":"101","severity":1,"message":"102","line":18,"column":8,"nodeType":"103","endLine":18,"endColumn":44,"suggestions":"104"},{"ruleId":"101","severity":1,"message":"105","line":78,"column":8,"nodeType":"103","endLine":78,"endColumn":28,"suggestions":"106"},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Label' is defined but never used.","'snippet' is assigned a value but never used.","'handleReadMoreClick' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'linkExit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'search'. Either include it or remove the dependency array.","ArrayExpression",["109"],"React Hook useEffect has a missing dependency: 'tooltip'. Either include it or remove the dependency array. You can also do a functional update 'setTooltip(t => ...)' if you only need 'tooltip' in the 'setTooltip' call.",["110"],"no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},"Update the dependencies array to be: [selectedSectors, selectedExchanges, search]",{"range":"115","text":"116"},"Update the dependencies array to be: [filepath, category, tooltip]",{"range":"117","text":"118"},[642,678],"[selectedSectors, selectedExchanges, search]",[3315,3335],"[filepath, category, tooltip]"]