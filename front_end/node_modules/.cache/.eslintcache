[{"/Users/stan/Desktop/esg_demo_system/front_end/src/index.js":"1","/Users/stan/Desktop/esg_demo_system/front_end/src/reportWebVitals.js":"2","/Users/stan/Desktop/esg_demo_system/front_end/src/App.js":"3","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/Contact.js":"4","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SentimentAnalysis.js":"5","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TopicsVis.js":"6","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/About.js":"7","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/Home.js":"8","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/WordFrequency.js":"9","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SentimentVis.js":"10","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TreeVisualisation.js":"11","/Users/stan/Desktop/esg_demo_system/front_end/src/components/Navbar.js":"12","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SearchPage.js":"13","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/Topics.js":"14","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/ReportStructure.js":"15","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/WordCloud.js":"16","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/CustomDropdown.js":"17"},{"size":586,"mtime":1686613035827,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1686613035828,"results":"20","hashOfConfig":"19"},{"size":1809,"mtime":1686994565697,"results":"21","hashOfConfig":"19"},{"size":175,"mtime":1686613035827,"results":"22","hashOfConfig":"19"},{"size":992,"mtime":1686994634028,"results":"23","hashOfConfig":"19"},{"size":490,"mtime":1686996538792,"results":"24","hashOfConfig":"19"},{"size":171,"mtime":1686613035827,"results":"25","hashOfConfig":"19"},{"size":162,"mtime":1687168430752,"results":"26","hashOfConfig":"19"},{"size":2039,"mtime":1686686162214,"results":"27","hashOfConfig":"19"},{"size":4273,"mtime":1686947394765,"results":"28","hashOfConfig":"19"},{"size":8336,"mtime":1687198890664,"results":"29","hashOfConfig":"19"},{"size":1873,"mtime":1686613035827,"results":"30","hashOfConfig":"19"},{"size":6895,"mtime":1687434988467,"results":"31","hashOfConfig":"19"},{"size":2099,"mtime":1687189996825,"results":"32","hashOfConfig":"19"},{"size":1290,"mtime":1686662125945,"results":"33","hashOfConfig":"19"},{"size":4394,"mtime":1686747549418,"results":"34","hashOfConfig":"19"},{"size":1366,"mtime":1687400085627,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"9pr7aj",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/stan/Desktop/esg_demo_system/front_end/src/index.js",[],["75","76"],"/Users/stan/Desktop/esg_demo_system/front_end/src/reportWebVitals.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/App.js",["77"],"import React from 'react';\nimport SearchPage from './pages/SearchPage';  \nimport { BrowserRouter as Router, Route, Link, Routes } from 'react-router-dom';\nimport Home from './pages/Home';\nimport About from './pages/About';\nimport Contact from './pages/Contact';\nimport Navbar from './components/Navbar';\nimport ReportStructure from './pages/ReportStructure';\nimport TreeVisualisation from './pages/TreeVisualisation';\nimport WordFrequency from './pages/WordFrequency';\nimport SentimentAnalysis from './pages/SentimentAnalysis';\nimport SentimentVis from './pages/SentimentVis';\nimport Topics from './pages/Topics';\nimport TopicsVis from './pages/TopicsVis';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar></Navbar>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/about\" element={<About />} />\n          <Route path=\"/contact\" element={<Contact />} />\n          <Route path=\"/companies\" element={<SearchPage />} /> \n          <Route path=\"/visualisations/report_structure\" element={<ReportStructure />} />\n          <Route path=\"/visualisations/report_structure/tree/:filename\" element={<TreeVisualisation />} /> \n          <Route path=\"/visualisations/word_frequency\" element={<WordFrequency />} />\n          <Route path=\"/visualisations/word_frequency/:filename\" element={<WordFrequency />} />\n          <Route path=\"/visualisations/sentiment_analysis\" element={<SentimentAnalysis />} />\n          <Route path=\"/visualisations/sentiment_analysis/:filename\" element={<SentimentVis />} />\n          <Route path=\"/visualisations/topics\" element={<Topics />} />\n          <Route path=\"/visualisations/topics/:fileName\" element={<TopicsVis/>} />\n\n          \n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n\n\n","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/Contact.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SentimentAnalysis.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TopicsVis.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/About.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/Home.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/WordFrequency.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SentimentVis.js",["78"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Brush, Label } from 'recharts';\nimport '../styles/sentiment.css';\n\nfunction SentimentVis() {\n    const { filename } = useParams(); // Get filename from URL parameters\n    const [sentimentData, setSentimentData] = useState(null);\n    const [selectedSentiments, setSelectedSentiments] = useState(['compound']); // Initialize with compound sentiment only\n\n    const sentimentColors = {\n        'compound': '#FF8133',\n        'pos': '#2E933C',\n        'neu': '#51B9F6',\n        'neg': '#FF5F5C'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await fetch(`http://localhost:3000/sentiment-data/${filename}`);\n            const data = await response.json();\n\n            const transformedData = data.neg.map((value, index) => {\n                return {\n                    index: index,\n                    neg: data.neg[index],\n                    neu: data.neu[index],\n                    pos: data.pos[index],\n                    compound: data.compound[index]\n                }\n            });\n\n            setSentimentData(transformedData);\n        }\n        fetchData();\n    }, [filename]); \n\n    const CustomTooltip = ({ active, payload, label }) => {\n        if (active && payload && payload.length) {\n            return (\n                <div className=\"custom-tooltip\" style={{ backgroundColor: '#f4f4f4', padding: '5px', border: '1px solid #d4d4d4' }}>\n                    <p className=\"label\">Index: {label}</p>\n                    {payload.map((pl, index) => \n                        <p key={index}>{`${pl.dataKey} score: ${pl.value}`}</p>\n                    )}\n                </div>\n            );\n        }\n        return null;\n    };\n\n    const handleCheckboxChange = (event) => {\n        if (selectedSentiments.includes(event.target.value)) {\n            setSelectedSentiments(selectedSentiments.filter(sentiment => sentiment !== event.target.value));\n        } else {\n            setSelectedSentiments([...selectedSentiments, event.target.value]);\n        }\n    }\n    \n    return (\n        <div>\n            {sentimentData ? (\n                <div>\n                    <h1>Sentiment scores over the course of a report for {filename}</h1>\n                    <div>\n                        {Object.keys(sentimentColors).map(sentiment => (\n                            <div key={sentiment}>\n                                <input \n                                    type=\"checkbox\"\n                                    id={sentiment}\n                                    value={sentiment}\n                                    checked={selectedSentiments.includes(sentiment)}\n                                    onChange={handleCheckboxChange}\n                                />\n                                <label htmlFor={sentiment}>{sentiment.charAt(0).toUpperCase() + sentiment.slice(1)}</label>\n                            </div>\n                        ))}\n                    </div>\n                    <LineChart\n                        className='myChart'\n                        width={1000}\n                        height={500}\n                        data={sentimentData}\n                        animationDuration={300} \n                        animationEasing=\"ease-out\"\n                        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"index\"/>\n                        <YAxis />\n                        <Tooltip content={<CustomTooltip />} />\n                        <Legend verticalAlign=\"top\" wrapperStyle={{ lineHeight: '40px' }} />\n                        {selectedSentiments.map(sentiment => \n                            <Line key={sentiment} type=\"monotone\" dataKey={sentiment} stroke={sentimentColors[sentiment]} strokeWidth={3} />\n                        )}\n                        <Brush />\n                    </LineChart>\n                </div>\n            ) : (\n                <p>Loading sentiment data...</p>\n            )}\n        </div>\n    );\n}\n\nexport default SentimentVis;\n","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/TreeVisualisation.js",["79","80"],"import React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { useParams } from 'react-router-dom';\nimport '../styles/TreeDiagram.css';\n\nfunction TreeVisualisation() {\n    \n    const { filename: filenameFromParams } = useParams();\n    const ref = useRef(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        console.log(\"Filename from params: \", filenameFromParams);\n        drawTree(filenameFromParams);\n    }, [filenameFromParams]);\n\n    const drawTree = (filename) => {\n        let i = 0;\n        let duration = 800;\n        let root;\n\n    const svgContainer = d3.select(ref.current)\n\n    svgContainer.selectAll(\"*\").remove();\n    \n    const zoom = d3.zoom()\n        .scaleExtent([0.5, 10])\n        .on(\"zoom\", function (event){\n            svg.attr(\"transform\", event.transform)\n        });\n\n    const svg = svgContainer.append(\"svg\")\n        .attr(\"width\", \"100%\")\n        .attr(\"height\", \"100%\")\n        .attr(\"viewBox\", \"-100 -20 2000 1000\")\n        .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n        .call(zoom)\n        .append(\"g\");\n\n        const treemap = d3.tree().size([900, 800])\n        .separation(function(a, b) {\n            return (a.parent == b.parent ? 1 : 5) / a.depth;\n        });\n\n        function centerTree() {\n            const nodesExtent = d3.extent(svg.selectAll('.node').nodes(), function(d) {\n                const bbox = d.getBBox();\n                const matrix = d.getCTM();\n                return matrix ? [matrix.e + bbox.x, matrix.e + bbox.x + bbox.width]: [0,0];\n            });\n        \n            const xOffset = (nodesExtent[0] + nodesExtent[1]) / -2;\n            const scale = 0.8; // You can adjust the scale as needed\n            svgContainer.transition()\n                .duration(duration)\n                .call(zoom.transform, d3.zoomIdentity.translate(xOffset, 0).scale(scale));\n        }\n\n    d3.json(`http://localhost:3000/processed_data/${filename}`)\n      .then((treeData) => { \n        console.log(\"Received tree data: \", treeData);\n        root = d3.hierarchy(treeData, function(d) { return d.children; });\n        root.x0 = 0;\n        root.y0 = window.innerWidth / 10;\n        root.children.forEach(collapse);\n        update(root);\n        centerTree();\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error(\"Error occurred while fetching and processing data: \", error);\n        setLoading(false);\n      });\n\n      const collapse = (d) => {\n        if(d.children) {\n          d._children = d.children;\n          d._children.forEach(collapse);\n          d.children = null;\n        }\n      }\n\n      const update = (source) => {\n        const treeData = treemap(root);\n        const nodes = treeData.descendants();\n        const links = treeData.descendants().slice(1);\n  \n        nodes.forEach(function(d){ d.x = d.depth * 1250});\n        \n        // nodes.forEach(function(d){ d.x = d.depth * 250});\n  \n        const node = svg.selectAll('g.node')\n            .data(nodes, function(d) {return d.id || (d.id = ++i); });\n  \n        const nodeEnter = node.enter().append('g')\n            .attr('class', 'node')\n            .attr(\"transform\", function(d) {\n              return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n          })\n          .on('click', (event, d) => click(d));\n\n        nodeEnter.append('circle')\n            .attr('class', 'node')\n            .attr('r', 1e-4)\n            .style(\"fill\", function(d) {\n                return d._children ? \"lightsteelblue\" : \"#fff\";\n            });\n\n        nodeEnter.append('text')\n        .attr(\"dy\", \" -1em\") // Shifts the text vertically so it's centered on the node\n        .attr(\"x\", 0) // Centers the text horizontally on the node\n        .style(\"text-anchor\", \"middle\") // Ensures the text is centered at its position\n        .text(function(d) { return d.data.name; });\n\n  \n        const nodeUpdate = nodeEnter.merge(node);\n  \n        nodeUpdate.transition()\n          .duration(duration)\n          .attr(\"transform\", function(d) { \n              return \"translate(\" + d.y + \",\" + d.x + \")\";\n           });\n  \n        nodeUpdate.select('circle.node')\n          .attr('r', 15)\n          .style(\"fill\", function(d) {\n              if (d._children) {\n                return \"lightsteelblue\";\n              } else if (d.children) {\n                return \"green\";\n              } else {\n                return \"#fff\";\n              }\n          })\n          .attr('cursor', 'pointer');\n  \n        const nodeExit = node.exit().transition()\n            .duration(duration)\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + source.y + \",\" + source.x + \")\";\n            })\n            .remove();\n  \n        nodeExit.select('circle')\n          .attr('r', 1e-5);\n  \n        nodeExit.select('text')\n          .style('fill-opacity', 1e-5);\n\n        \n          nodeExit.transition()\n          .duration(duration)\n          .attr(\"transform\", function(d) {\n              return \"translate(\" + source.x + \",\" + source.y + \")\";\n          })\n          .remove();\n  \n        const link = svg.selectAll('path.link')\n            .data(links, function(d) { return d.id; });\n  \n        const linkEnter = link.enter().insert('path', \"g\")\n            .attr(\"class\", \"link\")\n            .attr('d', function(d){\n              var o = {x: source.x0, y: source.y0}\n              return diagonal(o, o)\n            });\n  \n        const linkUpdate = linkEnter.merge(link);\n  \n        linkUpdate.transition()\n            .duration(duration)\n            .attr('d', function(d){ return diagonal(d, d.parent) });\n  \n        const linkExit = link.exit().transition()\n            .duration(duration)\n            .attr('d', function(d) {\n              var o = {x: source.x, y: source.y}\n              return diagonal(o, o)\n            })\n            .remove();\n  \n        nodes.forEach(function(d){\n          d.x0 = d.x;\n          d.y0 = d.y;\n        });\n\n        function click(d) {\n            let nodeToFocus;\n            \n            // If the clicked node is the root\n            if (d.depth === 0) {\n              if (d.children) { // If the root node has children\n                collapseAll(d); // Collapse all children\n              } else if (d._children) { // If the root node has collapsed children\n                d.children = d._children; // Expand the root node\n                d._children = null;\n              }\n              nodeToFocus = d; // Set the root node as the node to focus\n            } else {\n              if (d.children) {\n                d._children = d.children;\n                d.children = null;\n                nodeToFocus = d.parent;\n              } else {\n                d.children = d._children;\n                d._children = null;\n                nodeToFocus = d;\n              }\n            }\n          \n            update(nodeToFocus); // Update with the node to focus\n            centerNode(nodeToFocus); // Center the node to focus\n          }\n          \n          // This function will recursively collapse all children of a node\n          function collapseAll(node) {\n            if (node.children) {\n              node.children.forEach(collapseAll); // Call this function for each child\n              node._children = node.children; \n              node.children = null; \n            }\n          }\n          \n        function centerNode(source){\n                let scale = 0.8;\n                let x = -source.y * scale + 300; // 750 is half of 1500 (the size defined for the tree layout)\n                let y = -source.x * scale + 300;\n                svgContainer.transition()\n                    .duration(duration)\n                    .ease(d3.easeCubic)\n                    .call(zoom.transform, d3.zoomIdentity.translate(x, y).scale(scale));\n        }\n        \n        function diagonal(s, d) {\n  \n          const path = `M ${s.y} ${s.x}\n                C ${(s.y + d.y) / 2} ${s.x},\n                  ${(s.y + d.y) / 2} ${d.x},\n                  ${d.y} ${d.x}`\n  \n          return path\n        }\n      }\n    }\n  \n    return (\n      <div className=\"visualisation\">\n        {loading ?\n        <div>Loading...</div> : null}\n        <div className={`svg-container ${loading ? 'hidden' : ''}`} ref={ref}></div>\n      </div>\n    );\n  }\n  \n  export default TreeVisualisation;","/Users/stan/Desktop/esg_demo_system/front_end/src/components/Navbar.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/SearchPage.js",["81","82"],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/Topics.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/ReportStructure.js",[],"/Users/stan/Desktop/esg_demo_system/front_end/src/pages/WordCloud.js",["83"],"import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport d3Cloud from 'd3-cloud';\n\nconst WordCloud = ({ filepath, category }) => {\n    const ref = useRef();\n    const [tooltip, setTooltip] = useState({content: \"\", visibility: false, x: 0, y: 0});\n    const tooltipRef = useRef();\n\n    useEffect(() => {\n        if (!filepath) {\n            return;\n        }\n        fetch(`http://localhost:3000/word-cloud/${btoa(filepath)}/${category}`)\n        .then(response => response.json())\n        .then(data => {\n            if (data.error) {\n                console.error(data.error);\n                return;\n            }\n\n            const words = Object.entries(data).map(([word, frequency]) => ({ word, frequency }));\n\n            var width = 1000;\n            var height = 720;\n            var colorInterpolate = getColorScale(category);\n            var color = d => colorInterpolate((d.frequency / d3.max(words, d => d.frequency)) * 0.7 + 0.35);\n\n            var fontSize = d3.scalePow().exponent(0.5).domain([0, d3.max(words, d => d.frequency)]).range([10, 100]);\n            var layout = d3Cloud().size([width, height]).words(words).padding(7).rotate(() => Math.round(Math.random()) * 90).font(\"Impact\").fontSize(d => fontSize(d.frequency)).on(\"end\", draw);\n\n            function draw(words) {\n                d3.select(ref.current).html(\"\").append(\"svg\")\n                    .attr(\"width\", layout.size()[0])\n                    .attr(\"height\", layout.size()[1])\n                    .append(\"g\")\n                    .attr(\"transform\", \"translate(\" + layout.size()[0] / 2 + \",\" + layout.size()[1] / 2 + \")\")\n                    .selectAll(\"text\")\n                    .data(words)\n                    .enter().append(\"text\")\n                    .style(\"font-size\", d => d.size + \"px\")\n                    .style(\"font-family\", \"Impact\")\n                    .style(\"fill\", color)\n                    .attr(\"text-anchor\", \"middle\")\n                    .attr(\"transform\", d => \"translate(\" + [d.x, d.y] + \")rotate(\" + d.rotate + \")\")\n                    .text(d => d.word)\n                    .on(\"mouseover\", mouseover)\n                    .on(\"mouseout\", mouseout)\n                    .attr(\"class\", \"word\");\n            }\n\n            function darkenColor(d){\n                return d3.rgb(color(d)).darker(1);\n            }\n\n            function mouseover(event, d) {\n                const totalWords = d3.sum(words, d => d.frequency);\n                const percentage = (d.frequency / totalWords * 100).toFixed(2);\n                d3.select(event.target)\n                    .transition()\n                    .duration(300)\n                    .style(\"fill\", () => darkenColor(d))\n                    .style(\"font-size\", (d.size + 5) + \"px\");\n                setTooltip({content: `${d.word}: ${d.frequency} (${percentage}%)`, visibility: true, x: event.clientX, y: event.clientY});\n            }\n\n            function mouseout(event, d) {\n                d3.select(event.target)\n                    .transition()\n                    .duration(300)\n                    .style(\"font-size\", d.size + \"px\")\n                    .style(\"fill\", () => color(d));\n                setTooltip({...tooltip, visibility: false});\n            }\n\n            layout.start();\n        });\n    }, [filepath, category]);\n\n    const getColorScale = (category) => {\n        switch (category) {\n            case \"environmental\":\n                return d3.interpolateGreens;\n            case \"social\":\n                return d3.interpolateOranges;\n            case \"governance\":\n                return d3.interpolateBlues;\n            default:\n                return d3.interpolateBlues;\n        }\n    };\n\n    return (\n        <div>\n            <div ref={ref}></div>\n            {tooltip.visibility && \n                <div ref={tooltipRef} style={{\n                    position: \"absolute\",\n                    left: tooltip.x,\n                    top: tooltip.y,\n                    background: \"rgba(0, 0, 0, 0.7)\",\n                    color: \"#fff\",\n                    padding: \"3px 8px\",\n                    borderRadius: \"4px\",\n                    pointerEvents: \"none\",\n                    fontSize: \"14px\",\n                    transform: 'translate(-50%, -100%)'\n                }}>{tooltip.content}</div>\n            }\n        </div>\n    );\n};\n\nexport default WordCloud;\n","/Users/stan/Desktop/esg_demo_system/front_end/src/pages/CustomDropdown.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":3,"column":42,"nodeType":"90","messageId":"91","endLine":3,"endColumn":46},{"ruleId":"88","severity":1,"message":"92","line":3,"column":80,"nodeType":"90","messageId":"91","endLine":3,"endColumn":85},{"ruleId":"93","severity":1,"message":"94","line":42,"column":30,"nodeType":"95","messageId":"96","endLine":42,"endColumn":32},{"ruleId":"88","severity":1,"message":"97","line":174,"column":15,"nodeType":"90","messageId":"91","endLine":174,"endColumn":23},{"ruleId":"88","severity":1,"message":"98","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":19},{"ruleId":"99","severity":1,"message":"100","line":18,"column":8,"nodeType":"101","endLine":18,"endColumn":44,"suggestions":"102"},{"ruleId":"99","severity":1,"message":"103","line":78,"column":8,"nodeType":"101","endLine":78,"endColumn":28,"suggestions":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Label' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'linkExit' is assigned a value but never used.","'Container' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'search'. Either include it or remove the dependency array.","ArrayExpression",["107"],"React Hook useEffect has a missing dependency: 'tooltip'. Either include it or remove the dependency array. You can also do a functional update 'setTooltip(t => ...)' if you only need 'tooltip' in the 'setTooltip' call.",["108"],"no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [selectedSectors, selectedExchanges, search]",{"range":"113","text":"114"},"Update the dependencies array to be: [filepath, category, tooltip]",{"range":"115","text":"116"},[653,689],"[selectedSectors, selectedExchanges, search]",[3315,3335],"[filepath, category, tooltip]"]